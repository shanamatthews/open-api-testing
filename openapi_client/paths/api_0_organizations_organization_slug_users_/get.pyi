# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# Query params
ProjectSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'project': typing.Union[ProjectSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_project = api_client.QueryParameter(
    name="project",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectSchema,
    explode=True,
)
# Path params
OrganizationSlugSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'organization_slug': typing.Union[OrganizationSlugSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_organization_slug = api_client.PathParameter(
    name="organization_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OrganizationSlugSchema,
    required=True,
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "dateCreated",
                    "expired",
                    "projects",
                    "role",
                    "pending",
                    "flags",
                    "name",
                    "roleName",
                    "id",
                    "user",
                    "email",
                }
                
                class properties:
                    dateCreated = schemas.StrSchema
                    
                    
                    class user(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "lastLogin",
                                "lastActive",
                                "avatarUrl",
                                "hasPasswordAuth",
                                "isStaff",
                                "dateJoined",
                                "isSuperuser",
                                "avatar",
                                "isActive",
                                "isManaged",
                                "emails",
                                "has2fa",
                                "name",
                                "id",
                                "email",
                                "username",
                            }
                            
                            class properties:
                                username = schemas.StrSchema
                                
                                
                                class lastLogin(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'lastLogin':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                isSuperuser = schemas.BoolSchema
                                isManaged = schemas.BoolSchema
                                lastActive = schemas.StrSchema
                                isStaff = schemas.BoolSchema
                                id = schemas.StrSchema
                                isActive = schemas.BoolSchema
                                has2fa = schemas.BoolSchema
                                name = schemas.StrSchema
                                avatarUrl = schemas.StrSchema
                                dateJoined = schemas.StrSchema
                                
                                
                                class emails(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    is_verified = schemas.BoolSchema
                                                    id = schemas.StrSchema
                                                    email = schemas.StrSchema
                                                    __annotations__ = {
                                                        "is_verified": is_verified,
                                                        "id": id,
                                                        "email": email,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["is_verified"]) -> MetaOapg.properties.is_verified: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_verified", "id", "email", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["is_verified"]) -> typing.Union[MetaOapg.properties.is_verified, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_verified", "id", "email", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                is_verified: typing.Union[MetaOapg.properties.is_verified, bool, schemas.Unset] = schemas.unset,
                                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    is_verified=is_verified,
                                                    id=id,
                                                    email=email,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'emails':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class avatar(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            avatarType = schemas.StrSchema
                                            
                                            
                                            class avatarUuid(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'avatarUuid':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            __annotations__ = {
                                                "avatarType": avatarType,
                                                "avatarUuid": avatarUuid,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["avatarType"]) -> MetaOapg.properties.avatarType: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["avatarUuid"]) -> MetaOapg.properties.avatarUuid: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["avatarType"]) -> typing.Union[MetaOapg.properties.avatarType, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["avatarUuid"]) -> typing.Union[MetaOapg.properties.avatarUuid, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        avatarType: typing.Union[MetaOapg.properties.avatarType, str, schemas.Unset] = schemas.unset,
                                        avatarUuid: typing.Union[MetaOapg.properties.avatarUuid, None, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'avatar':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            avatarType=avatarType,
                                            avatarUuid=avatarUuid,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                hasPasswordAuth = schemas.BoolSchema
                                email = schemas.StrSchema
                                __annotations__ = {
                                    "username": username,
                                    "lastLogin": lastLogin,
                                    "isSuperuser": isSuperuser,
                                    "isManaged": isManaged,
                                    "lastActive": lastActive,
                                    "isStaff": isStaff,
                                    "id": id,
                                    "isActive": isActive,
                                    "has2fa": has2fa,
                                    "name": name,
                                    "avatarUrl": avatarUrl,
                                    "dateJoined": dateJoined,
                                    "emails": emails,
                                    "avatar": avatar,
                                    "hasPasswordAuth": hasPasswordAuth,
                                    "email": email,
                                }
                        
                        lastLogin: MetaOapg.properties.lastLogin
                        lastActive: MetaOapg.properties.lastActive
                        avatarUrl: MetaOapg.properties.avatarUrl
                        hasPasswordAuth: MetaOapg.properties.hasPasswordAuth
                        isStaff: MetaOapg.properties.isStaff
                        dateJoined: MetaOapg.properties.dateJoined
                        isSuperuser: MetaOapg.properties.isSuperuser
                        avatar: MetaOapg.properties.avatar
                        isActive: MetaOapg.properties.isActive
                        isManaged: MetaOapg.properties.isManaged
                        emails: MetaOapg.properties.emails
                        has2fa: MetaOapg.properties.has2fa
                        name: MetaOapg.properties.name
                        id: MetaOapg.properties.id
                        email: MetaOapg.properties.email
                        username: MetaOapg.properties.username
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastLogin"]) -> MetaOapg.properties.lastLogin: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isSuperuser"]) -> MetaOapg.properties.isSuperuser: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isManaged"]) -> MetaOapg.properties.isManaged: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastActive"]) -> MetaOapg.properties.lastActive: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isStaff"]) -> MetaOapg.properties.isStaff: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["has2fa"]) -> MetaOapg.properties.has2fa: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avatarUrl"]) -> MetaOapg.properties.avatarUrl: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateJoined"]) -> MetaOapg.properties.dateJoined: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasPasswordAuth"]) -> MetaOapg.properties.hasPasswordAuth: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["username", "lastLogin", "isSuperuser", "isManaged", "lastActive", "isStaff", "id", "isActive", "has2fa", "name", "avatarUrl", "dateJoined", "emails", "avatar", "hasPasswordAuth", "email", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastLogin"]) -> MetaOapg.properties.lastLogin: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isSuperuser"]) -> MetaOapg.properties.isSuperuser: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isManaged"]) -> MetaOapg.properties.isManaged: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastActive"]) -> MetaOapg.properties.lastActive: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isStaff"]) -> MetaOapg.properties.isStaff: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["has2fa"]) -> MetaOapg.properties.has2fa: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avatarUrl"]) -> MetaOapg.properties.avatarUrl: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateJoined"]) -> MetaOapg.properties.dateJoined: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasPasswordAuth"]) -> MetaOapg.properties.hasPasswordAuth: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["username", "lastLogin", "isSuperuser", "isManaged", "lastActive", "isStaff", "id", "isActive", "has2fa", "name", "avatarUrl", "dateJoined", "emails", "avatar", "hasPasswordAuth", "email", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            lastLogin: typing.Union[MetaOapg.properties.lastLogin, None, str, ],
                            lastActive: typing.Union[MetaOapg.properties.lastActive, str, ],
                            avatarUrl: typing.Union[MetaOapg.properties.avatarUrl, str, ],
                            hasPasswordAuth: typing.Union[MetaOapg.properties.hasPasswordAuth, bool, ],
                            isStaff: typing.Union[MetaOapg.properties.isStaff, bool, ],
                            dateJoined: typing.Union[MetaOapg.properties.dateJoined, str, ],
                            isSuperuser: typing.Union[MetaOapg.properties.isSuperuser, bool, ],
                            avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, ],
                            isActive: typing.Union[MetaOapg.properties.isActive, bool, ],
                            isManaged: typing.Union[MetaOapg.properties.isManaged, bool, ],
                            emails: typing.Union[MetaOapg.properties.emails, list, tuple, ],
                            has2fa: typing.Union[MetaOapg.properties.has2fa, bool, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            email: typing.Union[MetaOapg.properties.email, str, ],
                            username: typing.Union[MetaOapg.properties.username, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'user':
                            return super().__new__(
                                cls,
                                *_args,
                                lastLogin=lastLogin,
                                lastActive=lastActive,
                                avatarUrl=avatarUrl,
                                hasPasswordAuth=hasPasswordAuth,
                                isStaff=isStaff,
                                dateJoined=dateJoined,
                                isSuperuser=isSuperuser,
                                avatar=avatar,
                                isActive=isActive,
                                isManaged=isManaged,
                                emails=emails,
                                has2fa=has2fa,
                                name=name,
                                id=id,
                                email=email,
                                username=username,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    roleName = schemas.StrSchema
                    expired = schemas.BoolSchema
                    id = schemas.StrSchema
                    
                    
                    class projects(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'projects':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    name = schemas.StrSchema
                    
                    
                    class role(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def OWNER(cls):
                            return cls("owner")
                        
                        @schemas.classproperty
                        def MANAGER(cls):
                            return cls("manager")
                        
                        @schemas.classproperty
                        def ADMIN(cls):
                            return cls("admin")
                        
                        @schemas.classproperty
                        def MEMBER(cls):
                            return cls("member")
                        
                        @schemas.classproperty
                        def BILLING(cls):
                            return cls("billing")
                    
                    
                    class flags(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                sso_linked = schemas.BoolSchema
                                sso_invalid = schemas.BoolSchema
                                __annotations__ = {
                                    "sso: linked": sso_linked,
                                    "sso: invalid": sso_invalid,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sso: linked"]) -> MetaOapg.properties.sso_linked: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sso: invalid"]) -> MetaOapg.properties.sso_invalid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["sso: linked", "sso: invalid", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sso: linked"]) -> typing.Union[MetaOapg.properties.sso_linked, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sso: invalid"]) -> typing.Union[MetaOapg.properties.sso_invalid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sso: linked", "sso: invalid", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'flags':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    email = schemas.StrSchema
                    pending = schemas.BoolSchema
                    __annotations__ = {
                        "dateCreated": dateCreated,
                        "user": user,
                        "roleName": roleName,
                        "expired": expired,
                        "id": id,
                        "projects": projects,
                        "name": name,
                        "role": role,
                        "flags": flags,
                        "email": email,
                        "pending": pending,
                    }
            
            dateCreated: MetaOapg.properties.dateCreated
            expired: MetaOapg.properties.expired
            projects: MetaOapg.properties.projects
            role: MetaOapg.properties.role
            pending: MetaOapg.properties.pending
            flags: MetaOapg.properties.flags
            name: MetaOapg.properties.name
            roleName: MetaOapg.properties.roleName
            id: MetaOapg.properties.id
            user: MetaOapg.properties.user
            email: MetaOapg.properties.email
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["roleName"]) -> MetaOapg.properties.roleName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["expired"]) -> MetaOapg.properties.expired: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateCreated", "user", "roleName", "expired", "id", "projects", "name", "role", "flags", "email", "pending", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["roleName"]) -> MetaOapg.properties.roleName: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["expired"]) -> MetaOapg.properties.expired: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateCreated", "user", "roleName", "expired", "id", "projects", "name", "role", "flags", "email", "pending", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, ],
                expired: typing.Union[MetaOapg.properties.expired, bool, ],
                projects: typing.Union[MetaOapg.properties.projects, list, tuple, ],
                role: typing.Union[MetaOapg.properties.role, str, ],
                pending: typing.Union[MetaOapg.properties.pending, bool, ],
                flags: typing.Union[MetaOapg.properties.flags, dict, frozendict.frozendict, ],
                name: typing.Union[MetaOapg.properties.name, str, ],
                roleName: typing.Union[MetaOapg.properties.roleName, str, ],
                id: typing.Union[MetaOapg.properties.id, str, ],
                user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
                email: typing.Union[MetaOapg.properties.email, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    dateCreated=dateCreated,
                    expired=expired,
                    projects=projects,
                    role=role,
                    pending=pending,
                    flags=flags,
                    name=name,
                    roleName=roleName,
                    id=id,
                    user=user,
                    email=email,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _list_an_organizations_users_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _list_an_organizations_users_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _list_an_organizations_users_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _list_an_organizations_users_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_organization_slug,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_project,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ListAnOrganizationsUsers(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_an_organizations_users(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def list_an_organizations_users(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def list_an_organizations_users(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def list_an_organizations_users(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_an_organizations_users_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_an_organizations_users_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


