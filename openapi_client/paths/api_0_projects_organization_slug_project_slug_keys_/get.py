# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# Query params
CursorSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'cursor': typing.Union[CursorSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
# Path params
OrganizationSlugSchema = schemas.StrSchema
ProjectSlugSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'organization_slug': typing.Union[OrganizationSlugSchema, str, ],
        'project_slug': typing.Union[ProjectSlugSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_organization_slug = api_client.PathParameter(
    name="organization_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OrganizationSlugSchema,
    required=True,
)
request_path_project_slug = api_client.PathParameter(
    name="project_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProjectSlugSchema,
    required=True,
)
_auth = [
    'auth_token',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "browserSdkVersion",
                    "browserSdk",
                    "dateCreated",
                    "rateLimit",
                    "public",
                    "name",
                    "id",
                    "label",
                    "secret",
                    "isActive",
                    "projectId",
                    "dsn",
                }
                
                class properties:
                    
                    
                    class browserSdk(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class choices(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'choices':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "choices": choices,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["choices"]) -> MetaOapg.properties.choices: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["choices", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["choices"]) -> typing.Union[MetaOapg.properties.choices, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["choices", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            choices: typing.Union[MetaOapg.properties.choices, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'browserSdk':
                            return super().__new__(
                                cls,
                                *_args,
                                choices=choices,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    browserSdkVersion = schemas.StrSchema
                    dateCreated = schemas.StrSchema
                    
                    
                    class dsn(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "csp",
                                "minidump",
                                "security",
                                "public",
                                "secret",
                                "cdn",
                            }
                            
                            class properties:
                                cdn = schemas.StrSchema
                                csp = schemas.StrSchema
                                minidump = schemas.StrSchema
                                public = schemas.StrSchema
                                secret = schemas.StrSchema
                                security = schemas.StrSchema
                                __annotations__ = {
                                    "cdn": cdn,
                                    "csp": csp,
                                    "minidump": minidump,
                                    "public": public,
                                    "secret": secret,
                                    "security": security,
                                }
                        
                        csp: MetaOapg.properties.csp
                        minidump: MetaOapg.properties.minidump
                        security: MetaOapg.properties.security
                        public: MetaOapg.properties.public
                        secret: MetaOapg.properties.secret
                        cdn: MetaOapg.properties.cdn
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cdn"]) -> MetaOapg.properties.cdn: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["csp"]) -> MetaOapg.properties.csp: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["minidump"]) -> MetaOapg.properties.minidump: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["security"]) -> MetaOapg.properties.security: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["cdn", "csp", "minidump", "public", "secret", "security", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cdn"]) -> MetaOapg.properties.cdn: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["csp"]) -> MetaOapg.properties.csp: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["minidump"]) -> MetaOapg.properties.minidump: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["security"]) -> MetaOapg.properties.security: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cdn", "csp", "minidump", "public", "secret", "security", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            csp: typing.Union[MetaOapg.properties.csp, str, ],
                            minidump: typing.Union[MetaOapg.properties.minidump, str, ],
                            security: typing.Union[MetaOapg.properties.security, str, ],
                            public: typing.Union[MetaOapg.properties.public, str, ],
                            secret: typing.Union[MetaOapg.properties.secret, str, ],
                            cdn: typing.Union[MetaOapg.properties.cdn, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'dsn':
                            return super().__new__(
                                cls,
                                *_args,
                                csp=csp,
                                minidump=minidump,
                                security=security,
                                public=public,
                                secret=secret,
                                cdn=cdn,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    id = schemas.StrSchema
                    isActive = schemas.BoolSchema
                    label = schemas.StrSchema
                    name = schemas.StrSchema
                    projectId = schemas.IntSchema
                    public = schemas.StrSchema
                    
                    
                    class rateLimit(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'rateLimit':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    secret = schemas.StrSchema
                    __annotations__ = {
                        "browserSdk": browserSdk,
                        "browserSdkVersion": browserSdkVersion,
                        "dateCreated": dateCreated,
                        "dsn": dsn,
                        "id": id,
                        "isActive": isActive,
                        "label": label,
                        "name": name,
                        "projectId": projectId,
                        "public": public,
                        "rateLimit": rateLimit,
                        "secret": secret,
                    }
            
            browserSdkVersion: MetaOapg.properties.browserSdkVersion
            browserSdk: MetaOapg.properties.browserSdk
            dateCreated: MetaOapg.properties.dateCreated
            rateLimit: MetaOapg.properties.rateLimit
            public: MetaOapg.properties.public
            name: MetaOapg.properties.name
            id: MetaOapg.properties.id
            label: MetaOapg.properties.label
            secret: MetaOapg.properties.secret
            isActive: MetaOapg.properties.isActive
            projectId: MetaOapg.properties.projectId
            dsn: MetaOapg.properties.dsn
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["browserSdk"]) -> MetaOapg.properties.browserSdk: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["browserSdkVersion"]) -> MetaOapg.properties.browserSdkVersion: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dsn"]) -> MetaOapg.properties.dsn: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["rateLimit"]) -> MetaOapg.properties.rateLimit: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["browserSdk", "browserSdkVersion", "dateCreated", "dsn", "id", "isActive", "label", "name", "projectId", "public", "rateLimit", "secret", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["browserSdk"]) -> MetaOapg.properties.browserSdk: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["browserSdkVersion"]) -> MetaOapg.properties.browserSdkVersion: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dsn"]) -> MetaOapg.properties.dsn: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["rateLimit"]) -> MetaOapg.properties.rateLimit: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["browserSdk", "browserSdkVersion", "dateCreated", "dsn", "id", "isActive", "label", "name", "projectId", "public", "rateLimit", "secret", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                browserSdkVersion: typing.Union[MetaOapg.properties.browserSdkVersion, str, ],
                browserSdk: typing.Union[MetaOapg.properties.browserSdk, dict, frozendict.frozendict, ],
                dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, ],
                rateLimit: typing.Union[MetaOapg.properties.rateLimit, None, str, ],
                public: typing.Union[MetaOapg.properties.public, str, ],
                name: typing.Union[MetaOapg.properties.name, str, ],
                id: typing.Union[MetaOapg.properties.id, str, ],
                label: typing.Union[MetaOapg.properties.label, str, ],
                secret: typing.Union[MetaOapg.properties.secret, str, ],
                isActive: typing.Union[MetaOapg.properties.isActive, bool, ],
                projectId: typing.Union[MetaOapg.properties.projectId, decimal.Decimal, int, ],
                dsn: typing.Union[MetaOapg.properties.dsn, dict, frozendict.frozendict, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    browserSdkVersion=browserSdkVersion,
                    browserSdk=browserSdk,
                    dateCreated=dateCreated,
                    rateLimit=rateLimit,
                    public=public,
                    name=name,
                    id=id,
                    label=label,
                    secret=secret,
                    isActive=isActive,
                    projectId=projectId,
                    dsn=dsn,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)
_status_code_to_response = {
    '200': _response_for_200,
    '403': _response_for_403,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _list_a_projects_client_keys_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _list_a_projects_client_keys_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _list_a_projects_client_keys_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _list_a_projects_client_keys_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_organization_slug,
            request_path_project_slug,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_cursor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ListAProjectsClientKeys(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_a_projects_client_keys(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def list_a_projects_client_keys(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def list_a_projects_client_keys(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def list_a_projects_client_keys(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_a_projects_client_keys_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_a_projects_client_keys_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


