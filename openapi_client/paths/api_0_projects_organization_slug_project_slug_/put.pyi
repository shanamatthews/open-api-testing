# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# Path params
OrganizationSlugSchema = schemas.StrSchema
ProjectSlugSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'organization_slug': typing.Union[OrganizationSlugSchema, str, ],
        'project_slug': typing.Union[ProjectSlugSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_organization_slug = api_client.PathParameter(
    name="organization_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OrganizationSlugSchema,
    required=True,
)
request_path_project_slug = api_client.PathParameter(
    name="project_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProjectSlugSchema,
    required=True,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            slug = schemas.StrSchema
            platform = schemas.StrSchema
            isBookmarked = schemas.BoolSchema
            digestsMinDelay = schemas.IntSchema
            digestsMaxDelay = schemas.IntSchema
            __annotations__ = {
                "name": name,
                "slug": slug,
                "platform": platform,
                "isBookmarked": isBookmarked,
                "digestsMinDelay": digestsMinDelay,
                "digestsMaxDelay": digestsMaxDelay,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digestsMinDelay"]) -> MetaOapg.properties.digestsMinDelay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digestsMaxDelay"]) -> MetaOapg.properties.digestsMaxDelay: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "slug", "platform", "isBookmarked", "digestsMinDelay", "digestsMaxDelay", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> typing.Union[MetaOapg.properties.platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBookmarked"]) -> typing.Union[MetaOapg.properties.isBookmarked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digestsMinDelay"]) -> typing.Union[MetaOapg.properties.digestsMinDelay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digestsMaxDelay"]) -> typing.Union[MetaOapg.properties.digestsMaxDelay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "slug", "platform", "isBookmarked", "digestsMinDelay", "digestsMaxDelay", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
        platform: typing.Union[MetaOapg.properties.platform, str, schemas.Unset] = schemas.unset,
        isBookmarked: typing.Union[MetaOapg.properties.isBookmarked, bool, schemas.Unset] = schemas.unset,
        digestsMinDelay: typing.Union[MetaOapg.properties.digestsMinDelay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        digestsMaxDelay: typing.Union[MetaOapg.properties.digestsMaxDelay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            name=name,
            slug=slug,
            platform=platform,
            isBookmarked=isBookmarked,
            digestsMinDelay=digestsMinDelay,
            digestsMaxDelay=digestsMaxDelay,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "isBookmarked",
            "storeCrashReports",
            "color",
            "safeFields",
            "hasAccess",
            "isMember",
            "platform",
            "platforms",
            "processingIssues",
            "features",
            "dateCreated",
            "scrapeJavaScript",
            "securityTokenHeader",
            "options",
            "isPublic",
            "id",
            "resolveAge",
            "subjectTemplate",
            "slug",
            "defaultEnvironment",
            "allowedDomains",
            "teams",
            "digestsMaxDelay",
            "digestsMinDelay",
            "scrubIPAddresses",
            "avatar",
            "team",
            "isInternal",
            "latestRelease",
            "securityToken",
            "sensitiveFields",
            "firstEvent",
            "dataScrubberDefaults",
            "organization",
            "relayPiiConfig",
            "name",
            "dataScrubber",
            "verifySSL",
            "subjectPrefix",
            "status",
        }
        
        class properties:
            
            
            class allowedDomains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedDomains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class avatar(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        avatarType = schemas.StrSchema
                        
                        
                        class avatarUuid(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'avatarUuid':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        __annotations__ = {
                            "avatarType": avatarType,
                            "avatarUuid": avatarUuid,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatarType"]) -> MetaOapg.properties.avatarType: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatarUuid"]) -> MetaOapg.properties.avatarUuid: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatarType"]) -> typing.Union[MetaOapg.properties.avatarType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatarUuid"]) -> typing.Union[MetaOapg.properties.avatarUuid, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    avatarType: typing.Union[MetaOapg.properties.avatarType, str, schemas.Unset] = schemas.unset,
                    avatarUuid: typing.Union[MetaOapg.properties.avatarUuid, None, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'avatar':
                    return super().__new__(
                        cls,
                        *_args,
                        avatarType=avatarType,
                        avatarUuid=avatarUuid,
                        _configuration=_configuration,
                        **kwargs,
                    )
            color = schemas.StrSchema
            dataScrubber = schemas.BoolSchema
            dataScrubberDefaults = schemas.BoolSchema
            dateCreated = schemas.StrSchema
            
            
            class defaultEnvironment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'defaultEnvironment':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            digestsMaxDelay = schemas.IntSchema
            digestsMinDelay = schemas.IntSchema
            
            
            class features(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'features':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class firstEvent(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstEvent':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            hasAccess = schemas.BoolSchema
            id = schemas.StrSchema
            isBookmarked = schemas.BoolSchema
            isInternal = schemas.BoolSchema
            isMember = schemas.BoolSchema
            isPublic = schemas.BoolSchema
            
            
            class latestRelease(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    required = {
                        "owner",
                        "shortVersion",
                        "projects",
                        "data",
                        "commitCount",
                        "lastCommit",
                        "lastDeploy",
                        "version",
                        "url",
                        "newGroups",
                        "ref",
                        "dateCreated",
                        "firstEvent",
                        "lastEvent",
                        "deployCount",
                        "dateReleased",
                        "authors",
                    }
                    
                    class properties:
                        
                        
                        class authors(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            name = schemas.StrSchema
                                            email = schemas.StrSchema
                                            __annotations__ = {
                                                "name": name,
                                                "email": email,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "email", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "email", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            name=name,
                                            email=email,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'authors':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        commitCount = schemas.IntSchema
                        data = schemas.DictSchema
                        dateCreated = schemas.StrSchema
                        
                        
                        class dateReleased(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'dateReleased':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        deployCount = schemas.IntSchema
                        
                        
                        class firstEvent(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'firstEvent':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class lastCommit(
                            schemas.DictBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneFrozenDictMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'lastCommit':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class lastDeploy(
                            schemas.DictBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneFrozenDictMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'lastDeploy':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class lastEvent(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'lastEvent':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        newGroups = schemas.IntSchema
                        
                        
                        class owner(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'owner':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class projects(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            name = schemas.StrSchema
                                            slug = schemas.StrSchema
                                            __annotations__ = {
                                                "name": name,
                                                "slug": slug,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "slug", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "slug", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            name=name,
                                            slug=slug,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'projects':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class ref(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'ref':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        shortVersion = schemas.StrSchema
                        
                        
                        class url(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'url':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        version = schemas.StrSchema
                        __annotations__ = {
                            "authors": authors,
                            "commitCount": commitCount,
                            "data": data,
                            "dateCreated": dateCreated,
                            "dateReleased": dateReleased,
                            "deployCount": deployCount,
                            "firstEvent": firstEvent,
                            "lastCommit": lastCommit,
                            "lastDeploy": lastDeploy,
                            "lastEvent": lastEvent,
                            "newGroups": newGroups,
                            "owner": owner,
                            "projects": projects,
                            "ref": ref,
                            "shortVersion": shortVersion,
                            "url": url,
                            "version": version,
                        }
            
                
                owner: MetaOapg.properties.owner
                shortVersion: MetaOapg.properties.shortVersion
                projects: MetaOapg.properties.projects
                data: MetaOapg.properties.data
                commitCount: MetaOapg.properties.commitCount
                lastCommit: MetaOapg.properties.lastCommit
                lastDeploy: MetaOapg.properties.lastDeploy
                version: MetaOapg.properties.version
                url: MetaOapg.properties.url
                newGroups: MetaOapg.properties.newGroups
                ref: MetaOapg.properties.ref
                dateCreated: MetaOapg.properties.dateCreated
                firstEvent: MetaOapg.properties.firstEvent
                lastEvent: MetaOapg.properties.lastEvent
                deployCount: MetaOapg.properties.deployCount
                dateReleased: MetaOapg.properties.dateReleased
                authors: MetaOapg.properties.authors
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["authors"]) -> MetaOapg.properties.authors: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["commitCount"]) -> MetaOapg.properties.commitCount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dateReleased"]) -> MetaOapg.properties.dateReleased: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["deployCount"]) -> MetaOapg.properties.deployCount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastCommit"]) -> MetaOapg.properties.lastCommit: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastDeploy"]) -> MetaOapg.properties.lastDeploy: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastEvent"]) -> MetaOapg.properties.lastEvent: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["newGroups"]) -> MetaOapg.properties.newGroups: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["shortVersion"]) -> MetaOapg.properties.shortVersion: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["authors", "commitCount", "data", "dateCreated", "dateReleased", "deployCount", "firstEvent", "lastCommit", "lastDeploy", "lastEvent", "newGroups", "owner", "projects", "ref", "shortVersion", "url", "version", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["authors"]) -> MetaOapg.properties.authors: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["commitCount"]) -> MetaOapg.properties.commitCount: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dateReleased"]) -> MetaOapg.properties.dateReleased: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["deployCount"]) -> MetaOapg.properties.deployCount: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastCommit"]) -> MetaOapg.properties.lastCommit: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastDeploy"]) -> MetaOapg.properties.lastDeploy: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastEvent"]) -> MetaOapg.properties.lastEvent: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["newGroups"]) -> MetaOapg.properties.newGroups: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["shortVersion"]) -> MetaOapg.properties.shortVersion: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authors", "commitCount", "data", "dateCreated", "dateReleased", "deployCount", "firstEvent", "lastCommit", "lastDeploy", "lastEvent", "newGroups", "owner", "projects", "ref", "shortVersion", "url", "version", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'latestRelease':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            name = schemas.StrSchema
            
            
            class options(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        feedbackbranding = schemas.BoolSchema
                        filtersblacklisted_ips = schemas.StrSchema
                        filterserror_messages = schemas.StrSchema
                        filtersreleases = schemas.StrSchema
                        sentrycsp_ignored_sources = schemas.StrSchema
                        sentrycsp_ignored_sources_defaults = schemas.BoolSchema
                        sentryreprocessing_active = schemas.BoolSchema
                        __annotations__ = {
                            "feedback:branding": feedbackbranding,
                            "filters:blacklisted_ips": filtersblacklisted_ips,
                            "filters:error_messages": filterserror_messages,
                            "filters:releases": filtersreleases,
                            "sentry:csp_ignored_sources": sentrycsp_ignored_sources,
                            "sentry:csp_ignored_sources_defaults": sentrycsp_ignored_sources_defaults,
                            "sentry:reprocessing_active": sentryreprocessing_active,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["feedback:branding"]) -> MetaOapg.properties.feedbackbranding: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["filters:blacklisted_ips"]) -> MetaOapg.properties.filtersblacklisted_ips: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["filters:error_messages"]) -> MetaOapg.properties.filterserror_messages: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["filters:releases"]) -> MetaOapg.properties.filtersreleases: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sentry:csp_ignored_sources"]) -> MetaOapg.properties.sentrycsp_ignored_sources: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sentry:csp_ignored_sources_defaults"]) -> MetaOapg.properties.sentrycsp_ignored_sources_defaults: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sentry:reprocessing_active"]) -> MetaOapg.properties.sentryreprocessing_active: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["feedback:branding", "filters:blacklisted_ips", "filters:error_messages", "filters:releases", "sentry:csp_ignored_sources", "sentry:csp_ignored_sources_defaults", "sentry:reprocessing_active", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["feedback:branding"]) -> typing.Union[MetaOapg.properties.feedbackbranding, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["filters:blacklisted_ips"]) -> typing.Union[MetaOapg.properties.filtersblacklisted_ips, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["filters:error_messages"]) -> typing.Union[MetaOapg.properties.filterserror_messages, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["filters:releases"]) -> typing.Union[MetaOapg.properties.filtersreleases, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sentry:csp_ignored_sources"]) -> typing.Union[MetaOapg.properties.sentrycsp_ignored_sources, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sentry:csp_ignored_sources_defaults"]) -> typing.Union[MetaOapg.properties.sentrycsp_ignored_sources_defaults, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sentry:reprocessing_active"]) -> typing.Union[MetaOapg.properties.sentryreprocessing_active, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["feedback:branding", "filters:blacklisted_ips", "filters:error_messages", "filters:releases", "sentry:csp_ignored_sources", "sentry:csp_ignored_sources_defaults", "sentry:reprocessing_active", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'options':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class organization(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "dateCreated",
                        "name",
                        "avatar",
                        "id",
                        "isEarlyAdopter",
                        "require2FA",
                        "slug",
                        "status",
                    }
                    
                    class properties:
                        
                        
                        class avatar(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    avatarType = schemas.StrSchema
                                    
                                    
                                    class avatarUuid(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'avatarUuid':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                _configuration=_configuration,
                                            )
                                    __annotations__ = {
                                        "avatarType": avatarType,
                                        "avatarUuid": avatarUuid,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["avatarType"]) -> MetaOapg.properties.avatarType: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["avatarUuid"]) -> MetaOapg.properties.avatarUuid: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["avatarType"]) -> typing.Union[MetaOapg.properties.avatarType, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["avatarUuid"]) -> typing.Union[MetaOapg.properties.avatarUuid, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                avatarType: typing.Union[MetaOapg.properties.avatarType, str, schemas.Unset] = schemas.unset,
                                avatarUuid: typing.Union[MetaOapg.properties.avatarUuid, None, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'avatar':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    avatarType=avatarType,
                                    avatarUuid=avatarUuid,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        dateCreated = schemas.DateTimeSchema
                        id = schemas.StrSchema
                        isEarlyAdopter = schemas.BoolSchema
                        name = schemas.StrSchema
                        require2FA = schemas.BoolSchema
                        slug = schemas.StrSchema
                        
                        
                        class status(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "name",
                                    "id",
                                }
                                
                                class properties:
                                    id = schemas.StrSchema
                                    name = schemas.StrSchema
                                    __annotations__ = {
                                        "id": id,
                                        "name": name,
                                    }
                            
                            name: MetaOapg.properties.name
                            id: MetaOapg.properties.id
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                name: typing.Union[MetaOapg.properties.name, str, ],
                                id: typing.Union[MetaOapg.properties.id, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'status':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    name=name,
                                    id=id,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "avatar": avatar,
                            "dateCreated": dateCreated,
                            "id": id,
                            "isEarlyAdopter": isEarlyAdopter,
                            "name": name,
                            "require2FA": require2FA,
                            "slug": slug,
                            "status": status,
                        }
                
                dateCreated: MetaOapg.properties.dateCreated
                name: MetaOapg.properties.name
                avatar: MetaOapg.properties.avatar
                id: MetaOapg.properties.id
                isEarlyAdopter: MetaOapg.properties.isEarlyAdopter
                require2FA: MetaOapg.properties.require2FA
                slug: MetaOapg.properties.slug
                status: MetaOapg.properties.status
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isEarlyAdopter"]) -> MetaOapg.properties.isEarlyAdopter: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["require2FA"]) -> MetaOapg.properties.require2FA: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatar", "dateCreated", "id", "isEarlyAdopter", "name", "require2FA", "slug", "status", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isEarlyAdopter"]) -> MetaOapg.properties.isEarlyAdopter: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["require2FA"]) -> MetaOapg.properties.require2FA: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatar", "dateCreated", "id", "isEarlyAdopter", "name", "require2FA", "slug", "status", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
                    name: typing.Union[MetaOapg.properties.name, str, ],
                    avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, ],
                    isEarlyAdopter: typing.Union[MetaOapg.properties.isEarlyAdopter, bool, ],
                    require2FA: typing.Union[MetaOapg.properties.require2FA, bool, ],
                    slug: typing.Union[MetaOapg.properties.slug, str, ],
                    status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'organization':
                    return super().__new__(
                        cls,
                        *_args,
                        dateCreated=dateCreated,
                        name=name,
                        avatar=avatar,
                        id=id,
                        isEarlyAdopter=isEarlyAdopter,
                        require2FA=require2FA,
                        slug=slug,
                        status=status,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class platform(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'platform':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class platforms(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'platforms':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class plugins(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "metadata",
                                "hasConfiguration",
                                "contexts",
                                "type",
                                "enabled",
                                "assets",
                                "canDisable",
                                "isTestable",
                                "name",
                                "doc",
                                "id",
                                "shortName",
                                "slug",
                                "status",
                            }
                            
                            class properties:
                                
                                
                                class assets(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'assets':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class author(
                                    schemas.DictBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneFrozenDictMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            name = schemas.StrSchema
                                            url = schemas.StrSchema
                                            __annotations__ = {
                                                "name": name,
                                                "url": url,
                                            }
                                
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "url", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "url", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'author':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            name=name,
                                            url=url,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                canDisable = schemas.BoolSchema
                                
                                
                                class contexts(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'contexts':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                description = schemas.StrSchema
                                doc = schemas.StrSchema
                                enabled = schemas.BoolSchema
                                hasConfiguration = schemas.BoolSchema
                                id = schemas.StrSchema
                                isTestable = schemas.BoolSchema
                                metadata = schemas.DictSchema
                                name = schemas.StrSchema
                                
                                
                                class resourceLinks(
                                    schemas.ListBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneTupleMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    title = schemas.StrSchema
                                                    url = schemas.StrSchema
                                                    __annotations__ = {
                                                        "title": title,
                                                        "url": url,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "url", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "url", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                                                url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    title=title,
                                                    url=url,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[list, tuple, None, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'resourceLinks':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                shortName = schemas.StrSchema
                                slug = schemas.StrSchema
                                status = schemas.StrSchema
                                type = schemas.StrSchema
                                
                                
                                class version(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'version':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "assets": assets,
                                    "author": author,
                                    "canDisable": canDisable,
                                    "contexts": contexts,
                                    "description": description,
                                    "doc": doc,
                                    "enabled": enabled,
                                    "hasConfiguration": hasConfiguration,
                                    "id": id,
                                    "isTestable": isTestable,
                                    "metadata": metadata,
                                    "name": name,
                                    "resourceLinks": resourceLinks,
                                    "shortName": shortName,
                                    "slug": slug,
                                    "status": status,
                                    "type": type,
                                    "version": version,
                                }
                        
                        metadata: MetaOapg.properties.metadata
                        hasConfiguration: MetaOapg.properties.hasConfiguration
                        contexts: MetaOapg.properties.contexts
                        type: MetaOapg.properties.type
                        enabled: MetaOapg.properties.enabled
                        assets: MetaOapg.properties.assets
                        canDisable: MetaOapg.properties.canDisable
                        isTestable: MetaOapg.properties.isTestable
                        name: MetaOapg.properties.name
                        doc: MetaOapg.properties.doc
                        id: MetaOapg.properties.id
                        shortName: MetaOapg.properties.shortName
                        slug: MetaOapg.properties.slug
                        status: MetaOapg.properties.status
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["assets"]) -> MetaOapg.properties.assets: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["author"]) -> MetaOapg.properties.author: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["canDisable"]) -> MetaOapg.properties.canDisable: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["contexts"]) -> MetaOapg.properties.contexts: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["doc"]) -> MetaOapg.properties.doc: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasConfiguration"]) -> MetaOapg.properties.hasConfiguration: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isTestable"]) -> MetaOapg.properties.isTestable: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["resourceLinks"]) -> MetaOapg.properties.resourceLinks: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["shortName"]) -> MetaOapg.properties.shortName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["assets", "author", "canDisable", "contexts", "description", "doc", "enabled", "hasConfiguration", "id", "isTestable", "metadata", "name", "resourceLinks", "shortName", "slug", "status", "type", "version", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["assets"]) -> MetaOapg.properties.assets: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> typing.Union[MetaOapg.properties.author, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["canDisable"]) -> MetaOapg.properties.canDisable: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["contexts"]) -> MetaOapg.properties.contexts: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["doc"]) -> MetaOapg.properties.doc: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasConfiguration"]) -> MetaOapg.properties.hasConfiguration: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isTestable"]) -> MetaOapg.properties.isTestable: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["resourceLinks"]) -> typing.Union[MetaOapg.properties.resourceLinks, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["shortName"]) -> MetaOapg.properties.shortName: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assets", "author", "canDisable", "contexts", "description", "doc", "enabled", "hasConfiguration", "id", "isTestable", "metadata", "name", "resourceLinks", "shortName", "slug", "status", "type", "version", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, ],
                            hasConfiguration: typing.Union[MetaOapg.properties.hasConfiguration, bool, ],
                            contexts: typing.Union[MetaOapg.properties.contexts, list, tuple, ],
                            type: typing.Union[MetaOapg.properties.type, str, ],
                            enabled: typing.Union[MetaOapg.properties.enabled, bool, ],
                            assets: typing.Union[MetaOapg.properties.assets, list, tuple, ],
                            canDisable: typing.Union[MetaOapg.properties.canDisable, bool, ],
                            isTestable: typing.Union[MetaOapg.properties.isTestable, bool, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            doc: typing.Union[MetaOapg.properties.doc, str, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            shortName: typing.Union[MetaOapg.properties.shortName, str, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, ],
                            status: typing.Union[MetaOapg.properties.status, str, ],
                            author: typing.Union[MetaOapg.properties.author, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                            description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                            resourceLinks: typing.Union[MetaOapg.properties.resourceLinks, list, tuple, None, schemas.Unset] = schemas.unset,
                            version: typing.Union[MetaOapg.properties.version, None, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                metadata=metadata,
                                hasConfiguration=hasConfiguration,
                                contexts=contexts,
                                type=type,
                                enabled=enabled,
                                assets=assets,
                                canDisable=canDisable,
                                isTestable=isTestable,
                                name=name,
                                doc=doc,
                                id=id,
                                shortName=shortName,
                                slug=slug,
                                status=status,
                                author=author,
                                description=description,
                                resourceLinks=resourceLinks,
                                version=version,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'plugins':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            processingIssues = schemas.IntSchema
            
            
            class relayPiiConfig(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relayPiiConfig':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            resolveAge = schemas.IntSchema
            
            
            class safeFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'safeFields':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            scrapeJavaScript = schemas.BoolSchema
            scrubIPAddresses = schemas.BoolSchema
            securityToken = schemas.StrSchema
            
            
            class securityTokenHeader(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'securityTokenHeader':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sensitiveFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sensitiveFields':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            slug = schemas.StrSchema
            status = schemas.StrSchema
            
            
            class storeCrashReports(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'storeCrashReports':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            subjectPrefix = schemas.StrSchema
            subjectTemplate = schemas.StrSchema
            
            
            class team(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "name",
                        "id",
                        "slug",
                    }
                    
                    class properties:
                        id = schemas.StrSchema
                        name = schemas.StrSchema
                        slug = schemas.StrSchema
                        __annotations__ = {
                            "id": id,
                            "name": name,
                            "slug": slug,
                        }
                
                name: MetaOapg.properties.name
                id: MetaOapg.properties.id
                slug: MetaOapg.properties.slug
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    name: typing.Union[MetaOapg.properties.name, str, ],
                    id: typing.Union[MetaOapg.properties.id, str, ],
                    slug: typing.Union[MetaOapg.properties.slug, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'team':
                    return super().__new__(
                        cls,
                        *_args,
                        name=name,
                        id=id,
                        slug=slug,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class teams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "name",
                                "id",
                                "slug",
                            }
                            
                            class properties:
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                slug = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "slug": slug,
                                }
                        
                        name: MetaOapg.properties.name
                        id: MetaOapg.properties.id
                        slug: MetaOapg.properties.slug
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                name=name,
                                id=id,
                                slug=slug,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            verifySSL = schemas.BoolSchema
            __annotations__ = {
                "allowedDomains": allowedDomains,
                "avatar": avatar,
                "color": color,
                "dataScrubber": dataScrubber,
                "dataScrubberDefaults": dataScrubberDefaults,
                "dateCreated": dateCreated,
                "defaultEnvironment": defaultEnvironment,
                "digestsMaxDelay": digestsMaxDelay,
                "digestsMinDelay": digestsMinDelay,
                "features": features,
                "firstEvent": firstEvent,
                "hasAccess": hasAccess,
                "id": id,
                "isBookmarked": isBookmarked,
                "isInternal": isInternal,
                "isMember": isMember,
                "isPublic": isPublic,
                "latestRelease": latestRelease,
                "name": name,
                "options": options,
                "organization": organization,
                "platform": platform,
                "platforms": platforms,
                "plugins": plugins,
                "processingIssues": processingIssues,
                "relayPiiConfig": relayPiiConfig,
                "resolveAge": resolveAge,
                "safeFields": safeFields,
                "scrapeJavaScript": scrapeJavaScript,
                "scrubIPAddresses": scrubIPAddresses,
                "securityToken": securityToken,
                "securityTokenHeader": securityTokenHeader,
                "sensitiveFields": sensitiveFields,
                "slug": slug,
                "status": status,
                "storeCrashReports": storeCrashReports,
                "subjectPrefix": subjectPrefix,
                "subjectTemplate": subjectTemplate,
                "team": team,
                "teams": teams,
                "verifySSL": verifySSL,
            }
    
    isBookmarked: MetaOapg.properties.isBookmarked
    storeCrashReports: MetaOapg.properties.storeCrashReports
    color: MetaOapg.properties.color
    safeFields: MetaOapg.properties.safeFields
    hasAccess: MetaOapg.properties.hasAccess
    isMember: MetaOapg.properties.isMember
    platform: MetaOapg.properties.platform
    platforms: MetaOapg.properties.platforms
    processingIssues: MetaOapg.properties.processingIssues
    features: MetaOapg.properties.features
    dateCreated: MetaOapg.properties.dateCreated
    scrapeJavaScript: MetaOapg.properties.scrapeJavaScript
    securityTokenHeader: MetaOapg.properties.securityTokenHeader
    options: MetaOapg.properties.options
    isPublic: MetaOapg.properties.isPublic
    id: MetaOapg.properties.id
    resolveAge: MetaOapg.properties.resolveAge
    subjectTemplate: MetaOapg.properties.subjectTemplate
    slug: MetaOapg.properties.slug
    defaultEnvironment: MetaOapg.properties.defaultEnvironment
    allowedDomains: MetaOapg.properties.allowedDomains
    teams: MetaOapg.properties.teams
    digestsMaxDelay: MetaOapg.properties.digestsMaxDelay
    digestsMinDelay: MetaOapg.properties.digestsMinDelay
    scrubIPAddresses: MetaOapg.properties.scrubIPAddresses
    avatar: MetaOapg.properties.avatar
    team: MetaOapg.properties.team
    isInternal: MetaOapg.properties.isInternal
    latestRelease: MetaOapg.properties.latestRelease
    securityToken: MetaOapg.properties.securityToken
    sensitiveFields: MetaOapg.properties.sensitiveFields
    firstEvent: MetaOapg.properties.firstEvent
    dataScrubberDefaults: MetaOapg.properties.dataScrubberDefaults
    organization: MetaOapg.properties.organization
    relayPiiConfig: MetaOapg.properties.relayPiiConfig
    name: MetaOapg.properties.name
    dataScrubber: MetaOapg.properties.dataScrubber
    verifySSL: MetaOapg.properties.verifySSL
    subjectPrefix: MetaOapg.properties.subjectPrefix
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedDomains"]) -> MetaOapg.properties.allowedDomains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataScrubber"]) -> MetaOapg.properties.dataScrubber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataScrubberDefaults"]) -> MetaOapg.properties.dataScrubberDefaults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultEnvironment"]) -> MetaOapg.properties.defaultEnvironment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digestsMaxDelay"]) -> MetaOapg.properties.digestsMaxDelay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digestsMinDelay"]) -> MetaOapg.properties.digestsMinDelay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isInternal"]) -> MetaOapg.properties.isInternal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latestRelease"]) -> MetaOapg.properties.latestRelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platforms"]) -> MetaOapg.properties.platforms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plugins"]) -> MetaOapg.properties.plugins: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingIssues"]) -> MetaOapg.properties.processingIssues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relayPiiConfig"]) -> MetaOapg.properties.relayPiiConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolveAge"]) -> MetaOapg.properties.resolveAge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safeFields"]) -> MetaOapg.properties.safeFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scrapeJavaScript"]) -> MetaOapg.properties.scrapeJavaScript: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scrubIPAddresses"]) -> MetaOapg.properties.scrubIPAddresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityToken"]) -> MetaOapg.properties.securityToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityTokenHeader"]) -> MetaOapg.properties.securityTokenHeader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensitiveFields"]) -> MetaOapg.properties.sensitiveFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storeCrashReports"]) -> MetaOapg.properties.storeCrashReports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjectPrefix"]) -> MetaOapg.properties.subjectPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjectTemplate"]) -> MetaOapg.properties.subjectTemplate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verifySSL"]) -> MetaOapg.properties.verifySSL: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allowedDomains", "avatar", "color", "dataScrubber", "dataScrubberDefaults", "dateCreated", "defaultEnvironment", "digestsMaxDelay", "digestsMinDelay", "features", "firstEvent", "hasAccess", "id", "isBookmarked", "isInternal", "isMember", "isPublic", "latestRelease", "name", "options", "organization", "platform", "platforms", "plugins", "processingIssues", "relayPiiConfig", "resolveAge", "safeFields", "scrapeJavaScript", "scrubIPAddresses", "securityToken", "securityTokenHeader", "sensitiveFields", "slug", "status", "storeCrashReports", "subjectPrefix", "subjectTemplate", "team", "teams", "verifySSL", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedDomains"]) -> MetaOapg.properties.allowedDomains: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataScrubber"]) -> MetaOapg.properties.dataScrubber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataScrubberDefaults"]) -> MetaOapg.properties.dataScrubberDefaults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultEnvironment"]) -> MetaOapg.properties.defaultEnvironment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digestsMaxDelay"]) -> MetaOapg.properties.digestsMaxDelay: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digestsMinDelay"]) -> MetaOapg.properties.digestsMinDelay: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isInternal"]) -> MetaOapg.properties.isInternal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latestRelease"]) -> MetaOapg.properties.latestRelease: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platforms"]) -> MetaOapg.properties.platforms: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plugins"]) -> typing.Union[MetaOapg.properties.plugins, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingIssues"]) -> MetaOapg.properties.processingIssues: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relayPiiConfig"]) -> MetaOapg.properties.relayPiiConfig: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolveAge"]) -> MetaOapg.properties.resolveAge: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safeFields"]) -> MetaOapg.properties.safeFields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scrapeJavaScript"]) -> MetaOapg.properties.scrapeJavaScript: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scrubIPAddresses"]) -> MetaOapg.properties.scrubIPAddresses: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityToken"]) -> MetaOapg.properties.securityToken: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityTokenHeader"]) -> MetaOapg.properties.securityTokenHeader: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensitiveFields"]) -> MetaOapg.properties.sensitiveFields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storeCrashReports"]) -> MetaOapg.properties.storeCrashReports: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjectPrefix"]) -> MetaOapg.properties.subjectPrefix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjectTemplate"]) -> MetaOapg.properties.subjectTemplate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verifySSL"]) -> MetaOapg.properties.verifySSL: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allowedDomains", "avatar", "color", "dataScrubber", "dataScrubberDefaults", "dateCreated", "defaultEnvironment", "digestsMaxDelay", "digestsMinDelay", "features", "firstEvent", "hasAccess", "id", "isBookmarked", "isInternal", "isMember", "isPublic", "latestRelease", "name", "options", "organization", "platform", "platforms", "plugins", "processingIssues", "relayPiiConfig", "resolveAge", "safeFields", "scrapeJavaScript", "scrubIPAddresses", "securityToken", "securityTokenHeader", "sensitiveFields", "slug", "status", "storeCrashReports", "subjectPrefix", "subjectTemplate", "team", "teams", "verifySSL", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isBookmarked: typing.Union[MetaOapg.properties.isBookmarked, bool, ],
        storeCrashReports: typing.Union[MetaOapg.properties.storeCrashReports, None, bool, ],
        color: typing.Union[MetaOapg.properties.color, str, ],
        safeFields: typing.Union[MetaOapg.properties.safeFields, list, tuple, ],
        hasAccess: typing.Union[MetaOapg.properties.hasAccess, bool, ],
        isMember: typing.Union[MetaOapg.properties.isMember, bool, ],
        platform: typing.Union[MetaOapg.properties.platform, None, str, ],
        platforms: typing.Union[MetaOapg.properties.platforms, list, tuple, ],
        processingIssues: typing.Union[MetaOapg.properties.processingIssues, decimal.Decimal, int, ],
        features: typing.Union[MetaOapg.properties.features, list, tuple, ],
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, ],
        scrapeJavaScript: typing.Union[MetaOapg.properties.scrapeJavaScript, bool, ],
        securityTokenHeader: typing.Union[MetaOapg.properties.securityTokenHeader, None, str, ],
        options: typing.Union[MetaOapg.properties.options, dict, frozendict.frozendict, ],
        isPublic: typing.Union[MetaOapg.properties.isPublic, bool, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        resolveAge: typing.Union[MetaOapg.properties.resolveAge, decimal.Decimal, int, ],
        subjectTemplate: typing.Union[MetaOapg.properties.subjectTemplate, str, ],
        slug: typing.Union[MetaOapg.properties.slug, str, ],
        defaultEnvironment: typing.Union[MetaOapg.properties.defaultEnvironment, None, str, ],
        allowedDomains: typing.Union[MetaOapg.properties.allowedDomains, list, tuple, ],
        teams: typing.Union[MetaOapg.properties.teams, list, tuple, ],
        digestsMaxDelay: typing.Union[MetaOapg.properties.digestsMaxDelay, decimal.Decimal, int, ],
        digestsMinDelay: typing.Union[MetaOapg.properties.digestsMinDelay, decimal.Decimal, int, ],
        scrubIPAddresses: typing.Union[MetaOapg.properties.scrubIPAddresses, bool, ],
        avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, ],
        team: typing.Union[MetaOapg.properties.team, dict, frozendict.frozendict, ],
        isInternal: typing.Union[MetaOapg.properties.isInternal, bool, ],
        latestRelease: typing.Union[MetaOapg.properties.latestRelease, dict, frozendict.frozendict, None, ],
        securityToken: typing.Union[MetaOapg.properties.securityToken, str, ],
        sensitiveFields: typing.Union[MetaOapg.properties.sensitiveFields, list, tuple, ],
        firstEvent: typing.Union[MetaOapg.properties.firstEvent, None, str, ],
        dataScrubberDefaults: typing.Union[MetaOapg.properties.dataScrubberDefaults, bool, ],
        organization: typing.Union[MetaOapg.properties.organization, dict, frozendict.frozendict, ],
        relayPiiConfig: typing.Union[MetaOapg.properties.relayPiiConfig, None, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        dataScrubber: typing.Union[MetaOapg.properties.dataScrubber, bool, ],
        verifySSL: typing.Union[MetaOapg.properties.verifySSL, bool, ],
        subjectPrefix: typing.Union[MetaOapg.properties.subjectPrefix, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        plugins: typing.Union[MetaOapg.properties.plugins, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            isBookmarked=isBookmarked,
            storeCrashReports=storeCrashReports,
            color=color,
            safeFields=safeFields,
            hasAccess=hasAccess,
            isMember=isMember,
            platform=platform,
            platforms=platforms,
            processingIssues=processingIssues,
            features=features,
            dateCreated=dateCreated,
            scrapeJavaScript=scrapeJavaScript,
            securityTokenHeader=securityTokenHeader,
            options=options,
            isPublic=isPublic,
            id=id,
            resolveAge=resolveAge,
            subjectTemplate=subjectTemplate,
            slug=slug,
            defaultEnvironment=defaultEnvironment,
            allowedDomains=allowedDomains,
            teams=teams,
            digestsMaxDelay=digestsMaxDelay,
            digestsMinDelay=digestsMinDelay,
            scrubIPAddresses=scrubIPAddresses,
            avatar=avatar,
            team=team,
            isInternal=isInternal,
            latestRelease=latestRelease,
            securityToken=securityToken,
            sensitiveFields=sensitiveFields,
            firstEvent=firstEvent,
            dataScrubberDefaults=dataScrubberDefaults,
            organization=organization,
            relayPiiConfig=relayPiiConfig,
            name=name,
            dataScrubber=dataScrubber,
            verifySSL=verifySSL,
            subjectPrefix=subjectPrefix,
            status=status,
            plugins=plugins,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _update_a_project_oapg(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _update_a_project_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _update_a_project_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _update_a_project_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _update_a_project_oapg(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_organization_slug,
            request_path_project_slug,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_any_type.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='put'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class UpdateAProject(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def update_a_project(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def update_a_project(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def update_a_project(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def update_a_project(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def update_a_project(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._update_a_project_oapg(
            body=body,
            path_params=path_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def put(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def put(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def put(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def put(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def put(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._update_a_project_oapg(
            body=body,
            path_params=path_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


