# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# Path params
OrganizationSlugSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'organization_slug': typing.Union[OrganizationSlugSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_organization_slug = api_client.PathParameter(
    name="organization_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OrganizationSlugSchema,
    required=True,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            slug = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "slug": slug,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "slug", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "slug", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            name=name,
            slug=slug,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "storeCrashReports",
            "access",
            "projects",
            "safeFields",
            "experiments",
            "openMembership",
            "isEarlyAdopter",
            "features",
            "allowSharedIssues",
            "dateCreated",
            "scrapeJavaScript",
            "quota",
            "pendingAccessRequests",
            "id",
            "require2FA",
            "slug",
            "defaultRole",
            "teams",
            "scrubIPAddresses",
            "avatar",
            "trustedRelays",
            "availableRoles",
            "enhancedPrivacy",
            "isDefault",
            "sensitiveFields",
            "dataScrubberDefaults",
            "name",
            "dataScrubber",
            "onboardingTasks",
            "status",
        }
        
        class properties:
            
            
            class access(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            allowSharedIssues = schemas.BoolSchema
            
            
            class availableRoles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                id=id,
                                name=name,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'availableRoles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class avatar(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        avatarType = schemas.StrSchema
                        
                        
                        class avatarUuid(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'avatarUuid':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        __annotations__ = {
                            "avatarType": avatarType,
                            "avatarUuid": avatarUuid,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatarType"]) -> MetaOapg.properties.avatarType: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatarUuid"]) -> MetaOapg.properties.avatarUuid: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatarType"]) -> typing.Union[MetaOapg.properties.avatarType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatarUuid"]) -> typing.Union[MetaOapg.properties.avatarUuid, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    avatarType: typing.Union[MetaOapg.properties.avatarType, str, schemas.Unset] = schemas.unset,
                    avatarUuid: typing.Union[MetaOapg.properties.avatarUuid, None, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'avatar':
                    return super().__new__(
                        cls,
                        *_args,
                        avatarType=avatarType,
                        avatarUuid=avatarUuid,
                        _configuration=_configuration,
                        **kwargs,
                    )
            dataScrubber = schemas.BoolSchema
            dataScrubberDefaults = schemas.BoolSchema
            dateCreated = schemas.DateTimeSchema
            defaultRole = schemas.StrSchema
            enhancedPrivacy = schemas.BoolSchema
            experiments = schemas.DictSchema
            
            
            class features(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'features':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            id = schemas.StrSchema
            isDefault = schemas.BoolSchema
            isEarlyAdopter = schemas.BoolSchema
            name = schemas.StrSchema
            
            
            class onboardingTasks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onboardingTasks':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            openMembership = schemas.BoolSchema
            pendingAccessRequests = schemas.Int64Schema
            
            
            class projects(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "isBookmarked",
                                "teams",
                                "hasAccess",
                                "isMember",
                                "team",
                                "platform",
                                "platforms",
                                "latestDeploys",
                                "dateCreated",
                                "firstEvent",
                                "name",
                                "id",
                                "slug",
                            }
                            
                            class properties:
                                dateCreated = schemas.StrSchema
                                
                                
                                class firstEvent(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'firstEvent':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                hasAccess = schemas.BoolSchema
                                id = schemas.StrSchema
                                isBookmarked = schemas.BoolSchema
                                isMember = schemas.BoolSchema
                                
                                
                                class latestDeploys(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'latestDeploys':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                name = schemas.StrSchema
                                
                                
                                class platform(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'platform':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class platforms(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'platforms':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                slug = schemas.StrSchema
                                
                                
                                class team(
                                    schemas.ComposedBase,
                                    schemas.DictBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneFrozenDictMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class one_of_0(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "name",
                                                    "id",
                                                    "slug",
                                                }
                                                
                                                class properties:
                                                    id = schemas.StrSchema
                                                    name = schemas.StrSchema
                                                    slug = schemas.StrSchema
                                                    __annotations__ = {
                                                        "id": id,
                                                        "name": name,
                                                        "slug": slug,
                                                    }
                                            
                                            name: MetaOapg.properties.name
                                            id: MetaOapg.properties.id
                                            slug: MetaOapg.properties.slug
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                name: typing.Union[MetaOapg.properties.name, str, ],
                                                id: typing.Union[MetaOapg.properties.id, str, ],
                                                slug: typing.Union[MetaOapg.properties.slug, str, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'one_of_0':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    name=name,
                                                    id=id,
                                                    slug=slug,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        
                                        class one_of_1(
                                            schemas.ComposedSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                
                                                class not_schema(
                                                    schemas.ComposedSchema,
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        any_of_0 = schemas.StrSchema
                                                        any_of_1 = schemas.NumberSchema
                                                        any_of_2 = schemas.BoolSchema
                                                        any_of_3 = schemas.DictSchema
                                                        
                                                        
                                                        class any_of_4(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.AnyTypeSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'any_of_4':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        @classmethod
                                                        @functools.lru_cache()
                                                        def any_of(cls):
                                                            # we need this here to make our import statements work
                                                            # we must store _composed_schemas in here so the code is only run
                                                            # when we invoke this method. If we kept this at the class
                                                            # level we would get an error because the class level
                                                            # code would be run when this module is imported, and these composed
                                                            # classes don't exist yet because their module has not finished
                                                            # loading
                                                            return [
                                                                cls.any_of_0,
                                                                cls.any_of_1,
                                                                cls.any_of_2,
                                                                cls.any_of_3,
                                                                cls.any_of_4,
                                                            ]
                                                
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'not_schema':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                        
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'one_of_1':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.one_of_0,
                                                cls.one_of_1,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'team':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class teams(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "name",
                                                    "id",
                                                    "slug",
                                                }
                                                
                                                class properties:
                                                    id = schemas.StrSchema
                                                    name = schemas.StrSchema
                                                    slug = schemas.StrSchema
                                                    __annotations__ = {
                                                        "id": id,
                                                        "name": name,
                                                        "slug": slug,
                                                    }
                                            
                                            name: MetaOapg.properties.name
                                            id: MetaOapg.properties.id
                                            slug: MetaOapg.properties.slug
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                name: typing.Union[MetaOapg.properties.name, str, ],
                                                id: typing.Union[MetaOapg.properties.id, str, ],
                                                slug: typing.Union[MetaOapg.properties.slug, str, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    name=name,
                                                    id=id,
                                                    slug=slug,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'teams':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "dateCreated": dateCreated,
                                    "firstEvent": firstEvent,
                                    "hasAccess": hasAccess,
                                    "id": id,
                                    "isBookmarked": isBookmarked,
                                    "isMember": isMember,
                                    "latestDeploys": latestDeploys,
                                    "name": name,
                                    "platform": platform,
                                    "platforms": platforms,
                                    "slug": slug,
                                    "team": team,
                                    "teams": teams,
                                }
                        
                        isBookmarked: MetaOapg.properties.isBookmarked
                        teams: MetaOapg.properties.teams
                        hasAccess: MetaOapg.properties.hasAccess
                        isMember: MetaOapg.properties.isMember
                        team: MetaOapg.properties.team
                        platform: MetaOapg.properties.platform
                        platforms: MetaOapg.properties.platforms
                        latestDeploys: MetaOapg.properties.latestDeploys
                        dateCreated: MetaOapg.properties.dateCreated
                        firstEvent: MetaOapg.properties.firstEvent
                        name: MetaOapg.properties.name
                        id: MetaOapg.properties.id
                        slug: MetaOapg.properties.slug
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["latestDeploys"]) -> MetaOapg.properties.latestDeploys: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["platforms"]) -> MetaOapg.properties.platforms: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateCreated", "firstEvent", "hasAccess", "id", "isBookmarked", "isMember", "latestDeploys", "name", "platform", "platforms", "slug", "team", "teams", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["latestDeploys"]) -> MetaOapg.properties.latestDeploys: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["platforms"]) -> MetaOapg.properties.platforms: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateCreated", "firstEvent", "hasAccess", "id", "isBookmarked", "isMember", "latestDeploys", "name", "platform", "platforms", "slug", "team", "teams", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            isBookmarked: typing.Union[MetaOapg.properties.isBookmarked, bool, ],
                            teams: typing.Union[MetaOapg.properties.teams, list, tuple, ],
                            hasAccess: typing.Union[MetaOapg.properties.hasAccess, bool, ],
                            isMember: typing.Union[MetaOapg.properties.isMember, bool, ],
                            team: typing.Union[MetaOapg.properties.team, dict, frozendict.frozendict, None, ],
                            platform: typing.Union[MetaOapg.properties.platform, None, str, ],
                            platforms: typing.Union[MetaOapg.properties.platforms, list, tuple, ],
                            latestDeploys: typing.Union[MetaOapg.properties.latestDeploys, None, str, ],
                            dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, ],
                            firstEvent: typing.Union[MetaOapg.properties.firstEvent, None, str, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                isBookmarked=isBookmarked,
                                teams=teams,
                                hasAccess=hasAccess,
                                isMember=isMember,
                                team=team,
                                platform=platform,
                                platforms=platforms,
                                latestDeploys=latestDeploys,
                                dateCreated=dateCreated,
                                firstEvent=firstEvent,
                                name=name,
                                id=id,
                                slug=slug,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projects':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            quota = schemas.DictSchema
            require2FA = schemas.BoolSchema
            
            
            class safeFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'safeFields':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            scrapeJavaScript = schemas.BoolSchema
            scrubIPAddresses = schemas.BoolSchema
            
            
            class sensitiveFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sensitiveFields':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            slug = schemas.StrSchema
            
            
            class status(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.StrSchema
                        name = schemas.StrSchema
                        __annotations__ = {
                            "id": id,
                            "name": name,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        name=name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            storeCrashReports = schemas.Int64Schema
            
            
            class teams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "dateCreated",
                                "hasAccess",
                                "memberCount",
                                "name",
                                "avatar",
                                "id",
                                "isMember",
                                "isPending",
                                "slug",
                            }
                            
                            class properties:
                                
                                
                                class avatar(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            avatarType = schemas.StrSchema
                                            
                                            
                                            class avatarUuid(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'avatarUuid':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            __annotations__ = {
                                                "avatarType": avatarType,
                                                "avatarUuid": avatarUuid,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["avatarType"]) -> MetaOapg.properties.avatarType: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["avatarUuid"]) -> MetaOapg.properties.avatarUuid: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["avatarType"]) -> typing.Union[MetaOapg.properties.avatarType, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["avatarUuid"]) -> typing.Union[MetaOapg.properties.avatarUuid, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        avatarType: typing.Union[MetaOapg.properties.avatarType, str, schemas.Unset] = schemas.unset,
                                        avatarUuid: typing.Union[MetaOapg.properties.avatarUuid, None, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'avatar':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            avatarType=avatarType,
                                            avatarUuid=avatarUuid,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                dateCreated = schemas.DateTimeSchema
                                hasAccess = schemas.BoolSchema
                                id = schemas.StrSchema
                                isMember = schemas.BoolSchema
                                isPending = schemas.BoolSchema
                                memberCount = schemas.Int64Schema
                                name = schemas.StrSchema
                                slug = schemas.StrSchema
                                __annotations__ = {
                                    "avatar": avatar,
                                    "dateCreated": dateCreated,
                                    "hasAccess": hasAccess,
                                    "id": id,
                                    "isMember": isMember,
                                    "isPending": isPending,
                                    "memberCount": memberCount,
                                    "name": name,
                                    "slug": slug,
                                }
                        
                        dateCreated: MetaOapg.properties.dateCreated
                        hasAccess: MetaOapg.properties.hasAccess
                        memberCount: MetaOapg.properties.memberCount
                        name: MetaOapg.properties.name
                        avatar: MetaOapg.properties.avatar
                        id: MetaOapg.properties.id
                        isMember: MetaOapg.properties.isMember
                        isPending: MetaOapg.properties.isPending
                        slug: MetaOapg.properties.slug
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isPending"]) -> MetaOapg.properties.isPending: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["memberCount"]) -> MetaOapg.properties.memberCount: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatar", "dateCreated", "hasAccess", "id", "isMember", "isPending", "memberCount", "name", "slug", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isPending"]) -> MetaOapg.properties.isPending: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["memberCount"]) -> MetaOapg.properties.memberCount: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatar", "dateCreated", "hasAccess", "id", "isMember", "isPending", "memberCount", "name", "slug", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
                            hasAccess: typing.Union[MetaOapg.properties.hasAccess, bool, ],
                            memberCount: typing.Union[MetaOapg.properties.memberCount, decimal.Decimal, int, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            isMember: typing.Union[MetaOapg.properties.isMember, bool, ],
                            isPending: typing.Union[MetaOapg.properties.isPending, bool, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                dateCreated=dateCreated,
                                hasAccess=hasAccess,
                                memberCount=memberCount,
                                name=name,
                                avatar=avatar,
                                id=id,
                                isMember=isMember,
                                isPending=isPending,
                                slug=slug,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class trustedRelays(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'trustedRelays':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "access": access,
                "allowSharedIssues": allowSharedIssues,
                "availableRoles": availableRoles,
                "avatar": avatar,
                "dataScrubber": dataScrubber,
                "dataScrubberDefaults": dataScrubberDefaults,
                "dateCreated": dateCreated,
                "defaultRole": defaultRole,
                "enhancedPrivacy": enhancedPrivacy,
                "experiments": experiments,
                "features": features,
                "id": id,
                "isDefault": isDefault,
                "isEarlyAdopter": isEarlyAdopter,
                "name": name,
                "onboardingTasks": onboardingTasks,
                "openMembership": openMembership,
                "pendingAccessRequests": pendingAccessRequests,
                "projects": projects,
                "quota": quota,
                "require2FA": require2FA,
                "safeFields": safeFields,
                "scrapeJavaScript": scrapeJavaScript,
                "scrubIPAddresses": scrubIPAddresses,
                "sensitiveFields": sensitiveFields,
                "slug": slug,
                "status": status,
                "storeCrashReports": storeCrashReports,
                "teams": teams,
                "trustedRelays": trustedRelays,
            }
    
    storeCrashReports: MetaOapg.properties.storeCrashReports
    access: MetaOapg.properties.access
    projects: MetaOapg.properties.projects
    safeFields: MetaOapg.properties.safeFields
    experiments: MetaOapg.properties.experiments
    openMembership: MetaOapg.properties.openMembership
    isEarlyAdopter: MetaOapg.properties.isEarlyAdopter
    features: MetaOapg.properties.features
    allowSharedIssues: MetaOapg.properties.allowSharedIssues
    dateCreated: MetaOapg.properties.dateCreated
    scrapeJavaScript: MetaOapg.properties.scrapeJavaScript
    quota: MetaOapg.properties.quota
    pendingAccessRequests: MetaOapg.properties.pendingAccessRequests
    id: MetaOapg.properties.id
    require2FA: MetaOapg.properties.require2FA
    slug: MetaOapg.properties.slug
    defaultRole: MetaOapg.properties.defaultRole
    teams: MetaOapg.properties.teams
    scrubIPAddresses: MetaOapg.properties.scrubIPAddresses
    avatar: MetaOapg.properties.avatar
    trustedRelays: MetaOapg.properties.trustedRelays
    availableRoles: MetaOapg.properties.availableRoles
    enhancedPrivacy: MetaOapg.properties.enhancedPrivacy
    isDefault: MetaOapg.properties.isDefault
    sensitiveFields: MetaOapg.properties.sensitiveFields
    dataScrubberDefaults: MetaOapg.properties.dataScrubberDefaults
    name: MetaOapg.properties.name
    dataScrubber: MetaOapg.properties.dataScrubber
    onboardingTasks: MetaOapg.properties.onboardingTasks
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowSharedIssues"]) -> MetaOapg.properties.allowSharedIssues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableRoles"]) -> MetaOapg.properties.availableRoles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataScrubber"]) -> MetaOapg.properties.dataScrubber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataScrubberDefaults"]) -> MetaOapg.properties.dataScrubberDefaults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultRole"]) -> MetaOapg.properties.defaultRole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enhancedPrivacy"]) -> MetaOapg.properties.enhancedPrivacy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experiments"]) -> MetaOapg.properties.experiments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDefault"]) -> MetaOapg.properties.isDefault: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEarlyAdopter"]) -> MetaOapg.properties.isEarlyAdopter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboardingTasks"]) -> MetaOapg.properties.onboardingTasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openMembership"]) -> MetaOapg.properties.openMembership: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pendingAccessRequests"]) -> MetaOapg.properties.pendingAccessRequests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quota"]) -> MetaOapg.properties.quota: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["require2FA"]) -> MetaOapg.properties.require2FA: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safeFields"]) -> MetaOapg.properties.safeFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scrapeJavaScript"]) -> MetaOapg.properties.scrapeJavaScript: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scrubIPAddresses"]) -> MetaOapg.properties.scrubIPAddresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensitiveFields"]) -> MetaOapg.properties.sensitiveFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storeCrashReports"]) -> MetaOapg.properties.storeCrashReports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustedRelays"]) -> MetaOapg.properties.trustedRelays: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access", "allowSharedIssues", "availableRoles", "avatar", "dataScrubber", "dataScrubberDefaults", "dateCreated", "defaultRole", "enhancedPrivacy", "experiments", "features", "id", "isDefault", "isEarlyAdopter", "name", "onboardingTasks", "openMembership", "pendingAccessRequests", "projects", "quota", "require2FA", "safeFields", "scrapeJavaScript", "scrubIPAddresses", "sensitiveFields", "slug", "status", "storeCrashReports", "teams", "trustedRelays", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowSharedIssues"]) -> MetaOapg.properties.allowSharedIssues: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableRoles"]) -> MetaOapg.properties.availableRoles: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataScrubber"]) -> MetaOapg.properties.dataScrubber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataScrubberDefaults"]) -> MetaOapg.properties.dataScrubberDefaults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultRole"]) -> MetaOapg.properties.defaultRole: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enhancedPrivacy"]) -> MetaOapg.properties.enhancedPrivacy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experiments"]) -> MetaOapg.properties.experiments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDefault"]) -> MetaOapg.properties.isDefault: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEarlyAdopter"]) -> MetaOapg.properties.isEarlyAdopter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboardingTasks"]) -> MetaOapg.properties.onboardingTasks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openMembership"]) -> MetaOapg.properties.openMembership: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pendingAccessRequests"]) -> MetaOapg.properties.pendingAccessRequests: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quota"]) -> MetaOapg.properties.quota: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["require2FA"]) -> MetaOapg.properties.require2FA: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safeFields"]) -> MetaOapg.properties.safeFields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scrapeJavaScript"]) -> MetaOapg.properties.scrapeJavaScript: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scrubIPAddresses"]) -> MetaOapg.properties.scrubIPAddresses: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensitiveFields"]) -> MetaOapg.properties.sensitiveFields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storeCrashReports"]) -> MetaOapg.properties.storeCrashReports: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustedRelays"]) -> MetaOapg.properties.trustedRelays: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access", "allowSharedIssues", "availableRoles", "avatar", "dataScrubber", "dataScrubberDefaults", "dateCreated", "defaultRole", "enhancedPrivacy", "experiments", "features", "id", "isDefault", "isEarlyAdopter", "name", "onboardingTasks", "openMembership", "pendingAccessRequests", "projects", "quota", "require2FA", "safeFields", "scrapeJavaScript", "scrubIPAddresses", "sensitiveFields", "slug", "status", "storeCrashReports", "teams", "trustedRelays", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        storeCrashReports: typing.Union[MetaOapg.properties.storeCrashReports, decimal.Decimal, int, ],
        access: typing.Union[MetaOapg.properties.access, list, tuple, ],
        projects: typing.Union[MetaOapg.properties.projects, list, tuple, ],
        safeFields: typing.Union[MetaOapg.properties.safeFields, list, tuple, ],
        experiments: typing.Union[MetaOapg.properties.experiments, dict, frozendict.frozendict, ],
        openMembership: typing.Union[MetaOapg.properties.openMembership, bool, ],
        isEarlyAdopter: typing.Union[MetaOapg.properties.isEarlyAdopter, bool, ],
        features: typing.Union[MetaOapg.properties.features, list, tuple, ],
        allowSharedIssues: typing.Union[MetaOapg.properties.allowSharedIssues, bool, ],
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
        scrapeJavaScript: typing.Union[MetaOapg.properties.scrapeJavaScript, bool, ],
        quota: typing.Union[MetaOapg.properties.quota, dict, frozendict.frozendict, ],
        pendingAccessRequests: typing.Union[MetaOapg.properties.pendingAccessRequests, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        require2FA: typing.Union[MetaOapg.properties.require2FA, bool, ],
        slug: typing.Union[MetaOapg.properties.slug, str, ],
        defaultRole: typing.Union[MetaOapg.properties.defaultRole, str, ],
        teams: typing.Union[MetaOapg.properties.teams, list, tuple, ],
        scrubIPAddresses: typing.Union[MetaOapg.properties.scrubIPAddresses, bool, ],
        avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, ],
        trustedRelays: typing.Union[MetaOapg.properties.trustedRelays, list, tuple, ],
        availableRoles: typing.Union[MetaOapg.properties.availableRoles, list, tuple, ],
        enhancedPrivacy: typing.Union[MetaOapg.properties.enhancedPrivacy, bool, ],
        isDefault: typing.Union[MetaOapg.properties.isDefault, bool, ],
        sensitiveFields: typing.Union[MetaOapg.properties.sensitiveFields, list, tuple, ],
        dataScrubberDefaults: typing.Union[MetaOapg.properties.dataScrubberDefaults, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        dataScrubber: typing.Union[MetaOapg.properties.dataScrubber, bool, ],
        onboardingTasks: typing.Union[MetaOapg.properties.onboardingTasks, list, tuple, ],
        status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            storeCrashReports=storeCrashReports,
            access=access,
            projects=projects,
            safeFields=safeFields,
            experiments=experiments,
            openMembership=openMembership,
            isEarlyAdopter=isEarlyAdopter,
            features=features,
            allowSharedIssues=allowSharedIssues,
            dateCreated=dateCreated,
            scrapeJavaScript=scrapeJavaScript,
            quota=quota,
            pendingAccessRequests=pendingAccessRequests,
            id=id,
            require2FA=require2FA,
            slug=slug,
            defaultRole=defaultRole,
            teams=teams,
            scrubIPAddresses=scrubIPAddresses,
            avatar=avatar,
            trustedRelays=trustedRelays,
            availableRoles=availableRoles,
            enhancedPrivacy=enhancedPrivacy,
            isDefault=isDefault,
            sensitiveFields=sensitiveFields,
            dataScrubberDefaults=dataScrubberDefaults,
            name=name,
            dataScrubber=dataScrubber,
            onboardingTasks=onboardingTasks,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _update_an_organization_oapg(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _update_an_organization_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _update_an_organization_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _update_an_organization_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _update_an_organization_oapg(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_organization_slug,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_any_type.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='put'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class UpdateAnOrganization(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def update_an_organization(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def update_an_organization(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def update_an_organization(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def update_an_organization(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def update_an_organization(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._update_an_organization_oapg(
            body=body,
            path_params=path_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def put(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def put(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def put(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def put(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def put(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._update_an_organization_oapg(
            body=body,
            path_params=path_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


