# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# Query params
StatsPeriodSchema = schemas.StrSchema
ShortIdLookupSchema = schemas.BoolSchema
QuerySchema = schemas.StrSchema
CursorSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'statsPeriod': typing.Union[StatsPeriodSchema, str, ],
        'shortIdLookup': typing.Union[ShortIdLookupSchema, bool, ],
        'query': typing.Union[QuerySchema, str, ],
        'cursor': typing.Union[CursorSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_stats_period = api_client.QueryParameter(
    name="statsPeriod",
    style=api_client.ParameterStyle.FORM,
    schema=StatsPeriodSchema,
    explode=True,
)
request_query_short_id_lookup = api_client.QueryParameter(
    name="shortIdLookup",
    style=api_client.ParameterStyle.FORM,
    schema=ShortIdLookupSchema,
    explode=True,
)
request_query_query = api_client.QueryParameter(
    name="query",
    style=api_client.ParameterStyle.FORM,
    schema=QuerySchema,
    explode=True,
)
request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
# Path params
OrganizationSlugSchema = schemas.StrSchema
ProjectSlugSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'organization_slug': typing.Union[OrganizationSlugSchema, str, ],
        'project_slug': typing.Union[ProjectSlugSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_organization_slug = api_client.PathParameter(
    name="organization_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OrganizationSlugSchema,
    required=True,
)
request_path_project_slug = api_client.PathParameter(
    name="project_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProjectSlugSchema,
    required=True,
)
_auth = [
    'auth_token',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "isBookmarked",
                    "shortId",
                    "metadata",
                    "logger",
                    "annotations",
                    "project",
                    "title",
                    "type",
                    "assignedTo",
                    "isSubscribed",
                    "stats",
                    "isPublic",
                    "id",
                    "level",
                    "firstSeen",
                    "count",
                    "shareId",
                    "culprit",
                    "numComments",
                    "subscriptionDetails",
                    "lastSeen",
                    "userCount",
                    "statusDetails",
                    "hasSeen",
                    "permalink",
                    "status",
                }
                
                class properties:
                    
                    
                    class annotations(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'annotations':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class assignedTo(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'assignedTo':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    count = schemas.StrSchema
                    culprit = schemas.StrSchema
                    firstSeen = schemas.StrSchema
                    hasSeen = schemas.BoolSchema
                    id = schemas.StrSchema
                    isBookmarked = schemas.BoolSchema
                    isPublic = schemas.BoolSchema
                    isSubscribed = schemas.BoolSchema
                    lastSeen = schemas.StrSchema
                    level = schemas.StrSchema
                    
                    
                    class logger(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'logger':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    
                    
                    class metadata(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class one_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "filename",
                                        "type",
                                        "value",
                                    }
                                    
                                    class properties:
                                        filename = schemas.StrSchema
                                        type = schemas.StrSchema
                                        value = schemas.StrSchema
                                        __annotations__ = {
                                            "filename": filename,
                                            "type": type,
                                            "value": value,
                                        }
                                
                                filename: MetaOapg.properties.filename
                                type: MetaOapg.properties.type
                                value: MetaOapg.properties.value
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["filename", "type", "value", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filename", "type", "value", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    filename: typing.Union[MetaOapg.properties.filename, str, ],
                                    type: typing.Union[MetaOapg.properties.type, str, ],
                                    value: typing.Union[MetaOapg.properties.value, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'one_of_0':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        filename=filename,
                                        type=type,
                                        value=value,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            
                            class one_of_1(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "title",
                                    }
                                    
                                    class properties:
                                        title = schemas.StrSchema
                                        __annotations__ = {
                                            "title": title,
                                        }
                                
                                title: MetaOapg.properties.title
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    title: typing.Union[MetaOapg.properties.title, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'one_of_1':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        title=title,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def one_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.one_of_0,
                                    cls.one_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'metadata':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    numComments = schemas.IntSchema
                    permalink = schemas.StrSchema
                    
                    
                    class project(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                slug = schemas.StrSchema
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                __annotations__ = {
                                    "slug": slug,
                                    "id": id,
                                    "name": name,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["slug", "id", "name", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["slug", "id", "name", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'project':
                            return super().__new__(
                                cls,
                                *_args,
                                slug=slug,
                                id=id,
                                name=name,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class shareId(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'shareId':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    shortId = schemas.StrSchema
                    
                    
                    class stats(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class _24h(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.NumberSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> '_24h':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "24h": _24h,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["24h"]) -> MetaOapg.properties._24h: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["24h", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["24h"]) -> typing.Union[MetaOapg.properties._24h, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["24h", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'stats':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class status(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "resolved": "RESOLVED",
                                "unresolved": "UNRESOLVED",
                                "ignored": "IGNORED",
                            }
                        
                        @schemas.classproperty
                        def RESOLVED(cls):
                            return cls("resolved")
                        
                        @schemas.classproperty
                        def UNRESOLVED(cls):
                            return cls("unresolved")
                        
                        @schemas.classproperty
                        def IGNORED(cls):
                            return cls("ignored")
                    statusDetails = schemas.DictSchema
                    
                    
                    class subscriptionDetails(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'subscriptionDetails':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    title = schemas.StrSchema
                    type = schemas.StrSchema
                    userCount = schemas.IntSchema
                    __annotations__ = {
                        "annotations": annotations,
                        "assignedTo": assignedTo,
                        "count": count,
                        "culprit": culprit,
                        "firstSeen": firstSeen,
                        "hasSeen": hasSeen,
                        "id": id,
                        "isBookmarked": isBookmarked,
                        "isPublic": isPublic,
                        "isSubscribed": isSubscribed,
                        "lastSeen": lastSeen,
                        "level": level,
                        "logger": logger,
                        "metadata": metadata,
                        "numComments": numComments,
                        "permalink": permalink,
                        "project": project,
                        "shareId": shareId,
                        "shortId": shortId,
                        "stats": stats,
                        "status": status,
                        "statusDetails": statusDetails,
                        "subscriptionDetails": subscriptionDetails,
                        "title": title,
                        "type": type,
                        "userCount": userCount,
                    }
            
            isBookmarked: MetaOapg.properties.isBookmarked
            shortId: MetaOapg.properties.shortId
            metadata: MetaOapg.properties.metadata
            logger: MetaOapg.properties.logger
            annotations: MetaOapg.properties.annotations
            project: MetaOapg.properties.project
            title: MetaOapg.properties.title
            type: MetaOapg.properties.type
            assignedTo: MetaOapg.properties.assignedTo
            isSubscribed: MetaOapg.properties.isSubscribed
            stats: MetaOapg.properties.stats
            isPublic: MetaOapg.properties.isPublic
            id: MetaOapg.properties.id
            level: MetaOapg.properties.level
            firstSeen: MetaOapg.properties.firstSeen
            count: MetaOapg.properties.count
            shareId: MetaOapg.properties.shareId
            culprit: MetaOapg.properties.culprit
            numComments: MetaOapg.properties.numComments
            subscriptionDetails: MetaOapg.properties.subscriptionDetails
            lastSeen: MetaOapg.properties.lastSeen
            userCount: MetaOapg.properties.userCount
            statusDetails: MetaOapg.properties.statusDetails
            hasSeen: MetaOapg.properties.hasSeen
            permalink: MetaOapg.properties.permalink
            status: MetaOapg.properties.status
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["assignedTo"]) -> MetaOapg.properties.assignedTo: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["culprit"]) -> MetaOapg.properties.culprit: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["firstSeen"]) -> MetaOapg.properties.firstSeen: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hasSeen"]) -> MetaOapg.properties.hasSeen: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isSubscribed"]) -> MetaOapg.properties.isSubscribed: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["lastSeen"]) -> MetaOapg.properties.lastSeen: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["logger"]) -> MetaOapg.properties.logger: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["numComments"]) -> MetaOapg.properties.numComments: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shareId"]) -> MetaOapg.properties.shareId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shortId"]) -> MetaOapg.properties.shortId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["statusDetails"]) -> MetaOapg.properties.statusDetails: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["subscriptionDetails"]) -> MetaOapg.properties.subscriptionDetails: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["userCount"]) -> MetaOapg.properties.userCount: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["annotations", "assignedTo", "count", "culprit", "firstSeen", "hasSeen", "id", "isBookmarked", "isPublic", "isSubscribed", "lastSeen", "level", "logger", "metadata", "numComments", "permalink", "project", "shareId", "shortId", "stats", "status", "statusDetails", "subscriptionDetails", "title", "type", "userCount", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["assignedTo"]) -> MetaOapg.properties.assignedTo: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["culprit"]) -> MetaOapg.properties.culprit: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["firstSeen"]) -> MetaOapg.properties.firstSeen: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hasSeen"]) -> MetaOapg.properties.hasSeen: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isSubscribed"]) -> MetaOapg.properties.isSubscribed: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["lastSeen"]) -> MetaOapg.properties.lastSeen: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["logger"]) -> MetaOapg.properties.logger: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["numComments"]) -> MetaOapg.properties.numComments: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shareId"]) -> MetaOapg.properties.shareId: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shortId"]) -> MetaOapg.properties.shortId: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["statusDetails"]) -> MetaOapg.properties.statusDetails: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["subscriptionDetails"]) -> MetaOapg.properties.subscriptionDetails: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["userCount"]) -> MetaOapg.properties.userCount: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annotations", "assignedTo", "count", "culprit", "firstSeen", "hasSeen", "id", "isBookmarked", "isPublic", "isSubscribed", "lastSeen", "level", "logger", "metadata", "numComments", "permalink", "project", "shareId", "shortId", "stats", "status", "statusDetails", "subscriptionDetails", "title", "type", "userCount", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                isBookmarked: typing.Union[MetaOapg.properties.isBookmarked, bool, ],
                shortId: typing.Union[MetaOapg.properties.shortId, str, ],
                metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                logger: typing.Union[MetaOapg.properties.logger, None, str, ],
                annotations: typing.Union[MetaOapg.properties.annotations, list, tuple, ],
                project: typing.Union[MetaOapg.properties.project, dict, frozendict.frozendict, ],
                title: typing.Union[MetaOapg.properties.title, str, ],
                type: typing.Union[MetaOapg.properties.type, str, ],
                assignedTo: typing.Union[MetaOapg.properties.assignedTo, dict, frozendict.frozendict, None, ],
                isSubscribed: typing.Union[MetaOapg.properties.isSubscribed, bool, ],
                stats: typing.Union[MetaOapg.properties.stats, dict, frozendict.frozendict, ],
                isPublic: typing.Union[MetaOapg.properties.isPublic, bool, ],
                id: typing.Union[MetaOapg.properties.id, str, ],
                level: typing.Union[MetaOapg.properties.level, str, ],
                firstSeen: typing.Union[MetaOapg.properties.firstSeen, str, ],
                count: typing.Union[MetaOapg.properties.count, str, ],
                shareId: typing.Union[MetaOapg.properties.shareId, None, str, ],
                culprit: typing.Union[MetaOapg.properties.culprit, str, ],
                numComments: typing.Union[MetaOapg.properties.numComments, decimal.Decimal, int, ],
                subscriptionDetails: typing.Union[MetaOapg.properties.subscriptionDetails, dict, frozendict.frozendict, None, ],
                lastSeen: typing.Union[MetaOapg.properties.lastSeen, str, ],
                userCount: typing.Union[MetaOapg.properties.userCount, decimal.Decimal, int, ],
                statusDetails: typing.Union[MetaOapg.properties.statusDetails, dict, frozendict.frozendict, ],
                hasSeen: typing.Union[MetaOapg.properties.hasSeen, bool, ],
                permalink: typing.Union[MetaOapg.properties.permalink, str, ],
                status: typing.Union[MetaOapg.properties.status, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    isBookmarked=isBookmarked,
                    shortId=shortId,
                    metadata=metadata,
                    logger=logger,
                    annotations=annotations,
                    project=project,
                    title=title,
                    type=type,
                    assignedTo=assignedTo,
                    isSubscribed=isSubscribed,
                    stats=stats,
                    isPublic=isPublic,
                    id=id,
                    level=level,
                    firstSeen=firstSeen,
                    count=count,
                    shareId=shareId,
                    culprit=culprit,
                    numComments=numComments,
                    subscriptionDetails=subscriptionDetails,
                    lastSeen=lastSeen,
                    userCount=userCount,
                    statusDetails=statusDetails,
                    hasSeen=hasSeen,
                    permalink=permalink,
                    status=status,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)
_status_code_to_response = {
    '200': _response_for_200,
    '403': _response_for_403,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _list_a_projects_issues_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _list_a_projects_issues_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _list_a_projects_issues_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _list_a_projects_issues_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_organization_slug,
            request_path_project_slug,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_stats_period,
            request_query_short_id_lookup,
            request_query_query,
            request_query_cursor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ListAProjectsIssues(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_a_projects_issues(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def list_a_projects_issues(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def list_a_projects_issues(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def list_a_projects_issues(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_a_projects_issues_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_a_projects_issues_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


