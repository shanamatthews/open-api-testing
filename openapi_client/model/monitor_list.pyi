# coding: utf-8

"""
    API Reference

    Sentry Public API  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: partners@sentry.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MonitorList(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "dateCreated",
                    "environments",
                    "name",
                    "project",
                    "id",
                    "type",
                    "config",
                    "slug",
                    "status",
                }
                
                class properties:
                    id = schemas.StrSchema
                    name = schemas.StrSchema
                    slug = schemas.StrSchema
                    status = schemas.StrSchema
                    type = schemas.StrSchema
                    config = schemas.AnyTypeSchema
                    dateCreated = schemas.DateTimeSchema
                    
                    
                    class project(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "isBookmarked",
                                "access",
                                "hasSessions",
                                "color",
                                "hasAccess",
                                "hasMonitors",
                                "avatar",
                                "isMember",
                                "firstTransactionEvent",
                                "platform",
                                "isInternal",
                                "features",
                                "hasReplays",
                                "dateCreated",
                                "hasProfiles",
                                "firstEvent",
                                "name",
                                "isPublic",
                                "id",
                                "slug",
                                "status",
                            }
                            
                            class properties:
                                stats = schemas.AnyTypeSchema
                                transactionStats = schemas.AnyTypeSchema
                                sessionStats = schemas.AnyTypeSchema
                                id = schemas.StrSchema
                                slug = schemas.StrSchema
                                name = schemas.StrSchema
                                
                                
                                class platform(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'platform':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                dateCreated = schemas.DateTimeSchema
                                isBookmarked = schemas.BoolSchema
                                isMember = schemas.BoolSchema
                                
                                
                                class features(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'features':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class firstEvent(
                                    schemas.DateTimeBase,
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        format = 'date-time'
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, datetime, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'firstEvent':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                firstTransactionEvent = schemas.BoolSchema
                                
                                
                                class access(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'access':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                hasAccess = schemas.BoolSchema
                                hasMonitors = schemas.BoolSchema
                                hasProfiles = schemas.BoolSchema
                                hasReplays = schemas.BoolSchema
                                hasSessions = schemas.BoolSchema
                                isInternal = schemas.BoolSchema
                                isPublic = schemas.BoolSchema
                                avatar = schemas.AnyTypeSchema
                                color = schemas.StrSchema
                                status = schemas.StrSchema
                                __annotations__ = {
                                    "stats": stats,
                                    "transactionStats": transactionStats,
                                    "sessionStats": sessionStats,
                                    "id": id,
                                    "slug": slug,
                                    "name": name,
                                    "platform": platform,
                                    "dateCreated": dateCreated,
                                    "isBookmarked": isBookmarked,
                                    "isMember": isMember,
                                    "features": features,
                                    "firstEvent": firstEvent,
                                    "firstTransactionEvent": firstTransactionEvent,
                                    "access": access,
                                    "hasAccess": hasAccess,
                                    "hasMonitors": hasMonitors,
                                    "hasProfiles": hasProfiles,
                                    "hasReplays": hasReplays,
                                    "hasSessions": hasSessions,
                                    "isInternal": isInternal,
                                    "isPublic": isPublic,
                                    "avatar": avatar,
                                    "color": color,
                                    "status": status,
                                }
                        
                        isBookmarked: MetaOapg.properties.isBookmarked
                        access: MetaOapg.properties.access
                        hasSessions: MetaOapg.properties.hasSessions
                        color: MetaOapg.properties.color
                        hasAccess: MetaOapg.properties.hasAccess
                        hasMonitors: MetaOapg.properties.hasMonitors
                        avatar: MetaOapg.properties.avatar
                        isMember: MetaOapg.properties.isMember
                        firstTransactionEvent: MetaOapg.properties.firstTransactionEvent
                        platform: MetaOapg.properties.platform
                        isInternal: MetaOapg.properties.isInternal
                        features: MetaOapg.properties.features
                        hasReplays: MetaOapg.properties.hasReplays
                        dateCreated: MetaOapg.properties.dateCreated
                        hasProfiles: MetaOapg.properties.hasProfiles
                        firstEvent: MetaOapg.properties.firstEvent
                        name: MetaOapg.properties.name
                        isPublic: MetaOapg.properties.isPublic
                        id: MetaOapg.properties.id
                        slug: MetaOapg.properties.slug
                        status: MetaOapg.properties.status
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["transactionStats"]) -> MetaOapg.properties.transactionStats: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sessionStats"]) -> MetaOapg.properties.sessionStats: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstTransactionEvent"]) -> MetaOapg.properties.firstTransactionEvent: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasMonitors"]) -> MetaOapg.properties.hasMonitors: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasProfiles"]) -> MetaOapg.properties.hasProfiles: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasReplays"]) -> MetaOapg.properties.hasReplays: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hasSessions"]) -> MetaOapg.properties.hasSessions: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isInternal"]) -> MetaOapg.properties.isInternal: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["stats", "transactionStats", "sessionStats", "id", "slug", "name", "platform", "dateCreated", "isBookmarked", "isMember", "features", "firstEvent", "firstTransactionEvent", "access", "hasAccess", "hasMonitors", "hasProfiles", "hasReplays", "hasSessions", "isInternal", "isPublic", "avatar", "color", "status", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> typing.Union[MetaOapg.properties.stats, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["transactionStats"]) -> typing.Union[MetaOapg.properties.transactionStats, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sessionStats"]) -> typing.Union[MetaOapg.properties.sessionStats, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstTransactionEvent"]) -> MetaOapg.properties.firstTransactionEvent: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasMonitors"]) -> MetaOapg.properties.hasMonitors: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasProfiles"]) -> MetaOapg.properties.hasProfiles: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasReplays"]) -> MetaOapg.properties.hasReplays: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hasSessions"]) -> MetaOapg.properties.hasSessions: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isInternal"]) -> MetaOapg.properties.isInternal: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stats", "transactionStats", "sessionStats", "id", "slug", "name", "platform", "dateCreated", "isBookmarked", "isMember", "features", "firstEvent", "firstTransactionEvent", "access", "hasAccess", "hasMonitors", "hasProfiles", "hasReplays", "hasSessions", "isInternal", "isPublic", "avatar", "color", "status", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            isBookmarked: typing.Union[MetaOapg.properties.isBookmarked, bool, ],
                            access: typing.Union[MetaOapg.properties.access, list, tuple, ],
                            hasSessions: typing.Union[MetaOapg.properties.hasSessions, bool, ],
                            color: typing.Union[MetaOapg.properties.color, str, ],
                            hasAccess: typing.Union[MetaOapg.properties.hasAccess, bool, ],
                            hasMonitors: typing.Union[MetaOapg.properties.hasMonitors, bool, ],
                            avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            isMember: typing.Union[MetaOapg.properties.isMember, bool, ],
                            firstTransactionEvent: typing.Union[MetaOapg.properties.firstTransactionEvent, bool, ],
                            platform: typing.Union[MetaOapg.properties.platform, None, str, ],
                            isInternal: typing.Union[MetaOapg.properties.isInternal, bool, ],
                            features: typing.Union[MetaOapg.properties.features, list, tuple, ],
                            hasReplays: typing.Union[MetaOapg.properties.hasReplays, bool, ],
                            dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
                            hasProfiles: typing.Union[MetaOapg.properties.hasProfiles, bool, ],
                            firstEvent: typing.Union[MetaOapg.properties.firstEvent, None, str, datetime, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            isPublic: typing.Union[MetaOapg.properties.isPublic, bool, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, ],
                            status: typing.Union[MetaOapg.properties.status, str, ],
                            stats: typing.Union[MetaOapg.properties.stats, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            transactionStats: typing.Union[MetaOapg.properties.transactionStats, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            sessionStats: typing.Union[MetaOapg.properties.sessionStats, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'project':
                            return super().__new__(
                                cls,
                                *_args,
                                isBookmarked=isBookmarked,
                                access=access,
                                hasSessions=hasSessions,
                                color=color,
                                hasAccess=hasAccess,
                                hasMonitors=hasMonitors,
                                avatar=avatar,
                                isMember=isMember,
                                firstTransactionEvent=firstTransactionEvent,
                                platform=platform,
                                isInternal=isInternal,
                                features=features,
                                hasReplays=hasReplays,
                                dateCreated=dateCreated,
                                hasProfiles=hasProfiles,
                                firstEvent=firstEvent,
                                name=name,
                                isPublic=isPublic,
                                id=id,
                                slug=slug,
                                status=status,
                                stats=stats,
                                transactionStats=transactionStats,
                                sessionStats=sessionStats,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class environments(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "dateCreated",
                                "name",
                                "nextCheckIn",
                                "lastCheckIn",
                                "status",
                            }
                            
                            class properties:
                                name = schemas.StrSchema
                                status = schemas.StrSchema
                                dateCreated = schemas.DateTimeSchema
                                lastCheckIn = schemas.DateTimeSchema
                                nextCheckIn = schemas.DateTimeSchema
                                __annotations__ = {
                                    "name": name,
                                    "status": status,
                                    "dateCreated": dateCreated,
                                    "lastCheckIn": lastCheckIn,
                                    "nextCheckIn": nextCheckIn,
                                }
                        
                        dateCreated: MetaOapg.properties.dateCreated
                        name: MetaOapg.properties.name
                        nextCheckIn: MetaOapg.properties.nextCheckIn
                        lastCheckIn: MetaOapg.properties.lastCheckIn
                        status: MetaOapg.properties.status
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastCheckIn"]) -> MetaOapg.properties.lastCheckIn: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nextCheckIn"]) -> MetaOapg.properties.nextCheckIn: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "status", "dateCreated", "lastCheckIn", "nextCheckIn", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastCheckIn"]) -> MetaOapg.properties.lastCheckIn: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nextCheckIn"]) -> MetaOapg.properties.nextCheckIn: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "status", "dateCreated", "lastCheckIn", "nextCheckIn", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            nextCheckIn: typing.Union[MetaOapg.properties.nextCheckIn, str, datetime, ],
                            lastCheckIn: typing.Union[MetaOapg.properties.lastCheckIn, str, datetime, ],
                            status: typing.Union[MetaOapg.properties.status, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'environments':
                            return super().__new__(
                                cls,
                                *_args,
                                dateCreated=dateCreated,
                                name=name,
                                nextCheckIn=nextCheckIn,
                                lastCheckIn=lastCheckIn,
                                status=status,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "id": id,
                        "name": name,
                        "slug": slug,
                        "status": status,
                        "type": type,
                        "config": config,
                        "dateCreated": dateCreated,
                        "project": project,
                        "environments": environments,
                    }
            
            dateCreated: MetaOapg.properties.dateCreated
            environments: MetaOapg.properties.environments
            name: MetaOapg.properties.name
            project: MetaOapg.properties.project
            id: MetaOapg.properties.id
            type: MetaOapg.properties.type
            config: MetaOapg.properties.config
            slug: MetaOapg.properties.slug
            status: MetaOapg.properties.status
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["environments"]) -> MetaOapg.properties.environments: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", "status", "type", "config", "dateCreated", "project", "environments", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["environments"]) -> MetaOapg.properties.environments: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", "status", "type", "config", "dateCreated", "project", "environments", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
                environments: typing.Union[MetaOapg.properties.environments, dict, frozendict.frozendict, ],
                name: typing.Union[MetaOapg.properties.name, str, ],
                project: typing.Union[MetaOapg.properties.project, dict, frozendict.frozendict, ],
                id: typing.Union[MetaOapg.properties.id, str, ],
                type: typing.Union[MetaOapg.properties.type, str, ],
                config: typing.Union[MetaOapg.properties.config, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                slug: typing.Union[MetaOapg.properties.slug, str, ],
                status: typing.Union[MetaOapg.properties.status, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    dateCreated=dateCreated,
                    environments=environments,
                    name=name,
                    project=project,
                    id=id,
                    type=type,
                    config=config,
                    slug=slug,
                    status=status,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MonitorList':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
