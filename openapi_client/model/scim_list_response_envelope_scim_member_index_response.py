# coding: utf-8

"""
    API Reference

    Sentry Public API  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: partners@sentry.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SCIMListResponseEnvelopeSCIMMemberIndexResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "startIndex",
            "totalResults",
            "itemsPerPage",
            "schemas",
            "Resources",
        }
        
        class properties:
            
            
            class schemas(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'schemas':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            totalResults = schemas.IntSchema
            startIndex = schemas.IntSchema
            itemsPerPage = schemas.IntSchema
            
            
            class Resources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "emails",
                                "meta",
                                "sentryOrgRole",
                                "schemas",
                                "name",
                                "id",
                                "userName",
                            }
                            
                            class properties:
                                active = schemas.BoolSchema
                                
                                
                                class schemas(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'schemas':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                id = schemas.StrSchema
                                userName = schemas.StrSchema
                                
                                
                                class name(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "familyName",
                                            "givenName",
                                        }
                                        
                                        class properties:
                                            givenName = schemas.StrSchema
                                            familyName = schemas.StrSchema
                                            __annotations__ = {
                                                "givenName": givenName,
                                                "familyName": familyName,
                                            }
                                    
                                    familyName: MetaOapg.properties.familyName
                                    givenName: MetaOapg.properties.givenName
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["familyName"]) -> MetaOapg.properties.familyName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["givenName", "familyName", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["familyName"]) -> MetaOapg.properties.familyName: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["givenName", "familyName", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        familyName: typing.Union[MetaOapg.properties.familyName, str, ],
                                        givenName: typing.Union[MetaOapg.properties.givenName, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'name':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            familyName=familyName,
                                            givenName=givenName,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class emails(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "type",
                                                    "value",
                                                    "primary",
                                                }
                                                
                                                class properties:
                                                    primary = schemas.BoolSchema
                                                    value = schemas.StrSchema
                                                    type = schemas.StrSchema
                                                    __annotations__ = {
                                                        "primary": primary,
                                                        "value": value,
                                                        "type": type,
                                                    }
                                            
                                            type: MetaOapg.properties.type
                                            value: MetaOapg.properties.value
                                            primary: MetaOapg.properties.primary
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["primary", "value", "type", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["primary", "value", "type", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                type: typing.Union[MetaOapg.properties.type, str, ],
                                                value: typing.Union[MetaOapg.properties.value, str, ],
                                                primary: typing.Union[MetaOapg.properties.primary, bool, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    type=type,
                                                    value=value,
                                                    primary=primary,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'emails':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class meta(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "resourceType",
                                        }
                                        
                                        class properties:
                                            resourceType = schemas.StrSchema
                                            __annotations__ = {
                                                "resourceType": resourceType,
                                            }
                                    
                                    resourceType: MetaOapg.properties.resourceType
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["resourceType"]) -> MetaOapg.properties.resourceType: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["resourceType", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["resourceType"]) -> MetaOapg.properties.resourceType: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resourceType", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        resourceType: typing.Union[MetaOapg.properties.resourceType, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'meta':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            resourceType=resourceType,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                sentryOrgRole = schemas.StrSchema
                                __annotations__ = {
                                    "active": active,
                                    "schemas": schemas,
                                    "id": id,
                                    "userName": userName,
                                    "name": name,
                                    "emails": emails,
                                    "meta": meta,
                                    "sentryOrgRole": sentryOrgRole,
                                }
                        
                        emails: MetaOapg.properties.emails
                        meta: MetaOapg.properties.meta
                        sentryOrgRole: MetaOapg.properties.sentryOrgRole
                        schemas: MetaOapg.properties.schemas
                        name: MetaOapg.properties.name
                        id: MetaOapg.properties.id
                        userName: MetaOapg.properties.userName
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["schemas"]) -> MetaOapg.properties.schemas: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sentryOrgRole"]) -> MetaOapg.properties.sentryOrgRole: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["active", "schemas", "id", "userName", "name", "emails", "meta", "sentryOrgRole", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["schemas"]) -> MetaOapg.properties.schemas: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sentryOrgRole"]) -> MetaOapg.properties.sentryOrgRole: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["active", "schemas", "id", "userName", "name", "emails", "meta", "sentryOrgRole", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            emails: typing.Union[MetaOapg.properties.emails, list, tuple, ],
                            meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, ],
                            sentryOrgRole: typing.Union[MetaOapg.properties.sentryOrgRole, str, ],
                            schemas: typing.Union[MetaOapg.properties.schemas, list, tuple, ],
                            name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            userName: typing.Union[MetaOapg.properties.userName, str, ],
                            active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                emails=emails,
                                meta=meta,
                                sentryOrgRole=sentryOrgRole,
                                schemas=schemas,
                                name=name,
                                id=id,
                                userName=userName,
                                active=active,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Resources':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "schemas": schemas,
                "totalResults": totalResults,
                "startIndex": startIndex,
                "itemsPerPage": itemsPerPage,
                "Resources": Resources,
            }
    
    startIndex: MetaOapg.properties.startIndex
    totalResults: MetaOapg.properties.totalResults
    itemsPerPage: MetaOapg.properties.itemsPerPage
    schemas: MetaOapg.properties.schemas
    Resources: MetaOapg.properties.Resources
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schemas"]) -> MetaOapg.properties.schemas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsPerPage"]) -> MetaOapg.properties.itemsPerPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Resources"]) -> MetaOapg.properties.Resources: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["schemas", "totalResults", "startIndex", "itemsPerPage", "Resources", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schemas"]) -> MetaOapg.properties.schemas: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalResults"]) -> MetaOapg.properties.totalResults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startIndex"]) -> MetaOapg.properties.startIndex: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsPerPage"]) -> MetaOapg.properties.itemsPerPage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Resources"]) -> MetaOapg.properties.Resources: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schemas", "totalResults", "startIndex", "itemsPerPage", "Resources", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        startIndex: typing.Union[MetaOapg.properties.startIndex, decimal.Decimal, int, ],
        totalResults: typing.Union[MetaOapg.properties.totalResults, decimal.Decimal, int, ],
        itemsPerPage: typing.Union[MetaOapg.properties.itemsPerPage, decimal.Decimal, int, ],
        schemas: typing.Union[MetaOapg.properties.schemas, list, tuple, ],
        Resources: typing.Union[MetaOapg.properties.Resources, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SCIMListResponseEnvelopeSCIMMemberIndexResponse':
        return super().__new__(
            cls,
            *_args,
            startIndex=startIndex,
            totalResults=totalResults,
            itemsPerPage=itemsPerPage,
            schemas=schemas,
            Resources=Resources,
            _configuration=_configuration,
            **kwargs,
        )
