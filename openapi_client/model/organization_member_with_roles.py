# coding: utf-8

"""
    API Reference

    Sentry Public API  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: partners@sentry.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrganizationMemberWithRoles(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "orgRoleList",
            "role",
            "teams",
            "inviteStatus",
            "pending",
            "roles",
            "flags",
            "isOnlyOwner",
            "invite_link",
            "teamRoles",
            "inviterName",
            "teamRoleList",
            "dateCreated",
            "expired",
            "orgRole",
            "orgRolesFromTeams",
            "name",
            "roleName",
            "id",
            "user",
            "email",
        }
        
        class properties:
            id = schemas.StrSchema
            email = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class user(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "lastLogin",
                        "lastActive",
                        "avatarUrl",
                        "hasPasswordAuth",
                        "isStaff",
                        "dateJoined",
                        "experiments",
                        "isSuperuser",
                        "isActive",
                        "isManaged",
                        "emails",
                        "has2fa",
                        "name",
                        "id",
                        "email",
                        "username",
                    }
                    
                    class properties:
                        
                        
                        class identities(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "dateSynced",
                                            "provider",
                                            "organization",
                                            "name",
                                            "dateVerified",
                                            "id",
                                        }
                                        
                                        class properties:
                                            id = schemas.StrSchema
                                            name = schemas.StrSchema
                                            
                                            
                                            class organization(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    required = {
                                                        "name",
                                                        "slug",
                                                    }
                                                    
                                                    class properties:
                                                        slug = schemas.StrSchema
                                                        name = schemas.StrSchema
                                                        __annotations__ = {
                                                            "slug": slug,
                                                            "name": name,
                                                        }
                                                
                                                name: MetaOapg.properties.name
                                                slug: MetaOapg.properties.slug
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["slug", "name", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["slug", "name", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    name: typing.Union[MetaOapg.properties.name, str, ],
                                                    slug: typing.Union[MetaOapg.properties.slug, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'organization':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        name=name,
                                                        slug=slug,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class provider(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    required = {
                                                        "name",
                                                        "id",
                                                    }
                                                    
                                                    class properties:
                                                        id = schemas.StrSchema
                                                        name = schemas.StrSchema
                                                        __annotations__ = {
                                                            "id": id,
                                                            "name": name,
                                                        }
                                                
                                                name: MetaOapg.properties.name
                                                id: MetaOapg.properties.id
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    name: typing.Union[MetaOapg.properties.name, str, ],
                                                    id: typing.Union[MetaOapg.properties.id, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'provider':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        name=name,
                                                        id=id,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            dateVerified = schemas.DateTimeSchema
                                            dateSynced = schemas.DateTimeSchema
                                            __annotations__ = {
                                                "id": id,
                                                "name": name,
                                                "organization": organization,
                                                "provider": provider,
                                                "dateVerified": dateVerified,
                                                "dateSynced": dateSynced,
                                            }
                                    
                                    dateSynced: MetaOapg.properties.dateSynced
                                    provider: MetaOapg.properties.provider
                                    organization: MetaOapg.properties.organization
                                    name: MetaOapg.properties.name
                                    dateVerified: MetaOapg.properties.dateVerified
                                    id: MetaOapg.properties.id
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["dateVerified"]) -> MetaOapg.properties.dateVerified: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["dateSynced"]) -> MetaOapg.properties.dateSynced: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "organization", "provider", "dateVerified", "dateSynced", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["dateVerified"]) -> MetaOapg.properties.dateVerified: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["dateSynced"]) -> MetaOapg.properties.dateSynced: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "organization", "provider", "dateVerified", "dateSynced", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        dateSynced: typing.Union[MetaOapg.properties.dateSynced, str, datetime, ],
                                        provider: typing.Union[MetaOapg.properties.provider, dict, frozendict.frozendict, ],
                                        organization: typing.Union[MetaOapg.properties.organization, dict, frozendict.frozendict, ],
                                        name: typing.Union[MetaOapg.properties.name, str, ],
                                        dateVerified: typing.Union[MetaOapg.properties.dateVerified, str, datetime, ],
                                        id: typing.Union[MetaOapg.properties.id, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            dateSynced=dateSynced,
                                            provider=provider,
                                            organization=organization,
                                            name=name,
                                            dateVerified=dateVerified,
                                            id=id,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'identities':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class avatar(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "avatarType",
                                    "avatarUuid",
                                }
                                
                                class properties:
                                    avatarType = schemas.StrSchema
                                    
                                    
                                    class avatarUuid(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'avatarUuid':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                _configuration=_configuration,
                                            )
                                    __annotations__ = {
                                        "avatarType": avatarType,
                                        "avatarUuid": avatarUuid,
                                    }
                            
                            avatarType: MetaOapg.properties.avatarType
                            avatarUuid: MetaOapg.properties.avatarUuid
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["avatarType"]) -> MetaOapg.properties.avatarType: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["avatarUuid"]) -> MetaOapg.properties.avatarUuid: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["avatarType"]) -> MetaOapg.properties.avatarType: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["avatarUuid"]) -> MetaOapg.properties.avatarUuid: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["avatarType", "avatarUuid", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                avatarType: typing.Union[MetaOapg.properties.avatarType, str, ],
                                avatarUuid: typing.Union[MetaOapg.properties.avatarUuid, None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'avatar':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    avatarType=avatarType,
                                    avatarUuid=avatarUuid,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        id = schemas.StrSchema
                        name = schemas.StrSchema
                        username = schemas.StrSchema
                        email = schemas.StrSchema
                        avatarUrl = schemas.StrSchema
                        isActive = schemas.BoolSchema
                        hasPasswordAuth = schemas.BoolSchema
                        isManaged = schemas.BoolSchema
                        dateJoined = schemas.DateTimeSchema
                        lastLogin = schemas.DateTimeSchema
                        has2fa = schemas.BoolSchema
                        lastActive = schemas.DateTimeSchema
                        isSuperuser = schemas.BoolSchema
                        isStaff = schemas.BoolSchema
                        
                        
                        class experiments(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                additional_properties = schemas.AnyTypeSchema
                            
                            def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                return super().get_item_oapg(name)
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            ) -> 'experiments':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class emails(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "id",
                                            "is_verified",
                                            "email",
                                        }
                                        
                                        class properties:
                                            id = schemas.StrSchema
                                            email = schemas.StrSchema
                                            is_verified = schemas.BoolSchema
                                            __annotations__ = {
                                                "id": id,
                                                "email": email,
                                                "is_verified": is_verified,
                                            }
                                    
                                    id: MetaOapg.properties.id
                                    is_verified: MetaOapg.properties.is_verified
                                    email: MetaOapg.properties.email
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["is_verified"]) -> MetaOapg.properties.is_verified: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "email", "is_verified", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["is_verified"]) -> MetaOapg.properties.is_verified: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "email", "is_verified", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, ],
                                        is_verified: typing.Union[MetaOapg.properties.is_verified, bool, ],
                                        email: typing.Union[MetaOapg.properties.email, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            id=id,
                                            is_verified=is_verified,
                                            email=email,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'emails':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "identities": identities,
                            "avatar": avatar,
                            "id": id,
                            "name": name,
                            "username": username,
                            "email": email,
                            "avatarUrl": avatarUrl,
                            "isActive": isActive,
                            "hasPasswordAuth": hasPasswordAuth,
                            "isManaged": isManaged,
                            "dateJoined": dateJoined,
                            "lastLogin": lastLogin,
                            "has2fa": has2fa,
                            "lastActive": lastActive,
                            "isSuperuser": isSuperuser,
                            "isStaff": isStaff,
                            "experiments": experiments,
                            "emails": emails,
                        }
                
                lastLogin: MetaOapg.properties.lastLogin
                lastActive: MetaOapg.properties.lastActive
                avatarUrl: MetaOapg.properties.avatarUrl
                hasPasswordAuth: MetaOapg.properties.hasPasswordAuth
                isStaff: MetaOapg.properties.isStaff
                dateJoined: MetaOapg.properties.dateJoined
                experiments: MetaOapg.properties.experiments
                isSuperuser: MetaOapg.properties.isSuperuser
                isActive: MetaOapg.properties.isActive
                isManaged: MetaOapg.properties.isManaged
                emails: MetaOapg.properties.emails
                has2fa: MetaOapg.properties.has2fa
                name: MetaOapg.properties.name
                id: MetaOapg.properties.id
                email: MetaOapg.properties.email
                username: MetaOapg.properties.username
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["identities"]) -> MetaOapg.properties.identities: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatarUrl"]) -> MetaOapg.properties.avatarUrl: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["hasPasswordAuth"]) -> MetaOapg.properties.hasPasswordAuth: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isManaged"]) -> MetaOapg.properties.isManaged: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dateJoined"]) -> MetaOapg.properties.dateJoined: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastLogin"]) -> MetaOapg.properties.lastLogin: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["has2fa"]) -> MetaOapg.properties.has2fa: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastActive"]) -> MetaOapg.properties.lastActive: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isSuperuser"]) -> MetaOapg.properties.isSuperuser: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isStaff"]) -> MetaOapg.properties.isStaff: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["experiments"]) -> MetaOapg.properties.experiments: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["identities", "avatar", "id", "name", "username", "email", "avatarUrl", "isActive", "hasPasswordAuth", "isManaged", "dateJoined", "lastLogin", "has2fa", "lastActive", "isSuperuser", "isStaff", "experiments", "emails", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["identities"]) -> typing.Union[MetaOapg.properties.identities, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> typing.Union[MetaOapg.properties.avatar, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatarUrl"]) -> MetaOapg.properties.avatarUrl: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["hasPasswordAuth"]) -> MetaOapg.properties.hasPasswordAuth: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isManaged"]) -> MetaOapg.properties.isManaged: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dateJoined"]) -> MetaOapg.properties.dateJoined: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastLogin"]) -> MetaOapg.properties.lastLogin: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["has2fa"]) -> MetaOapg.properties.has2fa: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastActive"]) -> MetaOapg.properties.lastActive: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isSuperuser"]) -> MetaOapg.properties.isSuperuser: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isStaff"]) -> MetaOapg.properties.isStaff: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["experiments"]) -> MetaOapg.properties.experiments: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["identities", "avatar", "id", "name", "username", "email", "avatarUrl", "isActive", "hasPasswordAuth", "isManaged", "dateJoined", "lastLogin", "has2fa", "lastActive", "isSuperuser", "isStaff", "experiments", "emails", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    lastLogin: typing.Union[MetaOapg.properties.lastLogin, str, datetime, ],
                    lastActive: typing.Union[MetaOapg.properties.lastActive, str, datetime, ],
                    avatarUrl: typing.Union[MetaOapg.properties.avatarUrl, str, ],
                    hasPasswordAuth: typing.Union[MetaOapg.properties.hasPasswordAuth, bool, ],
                    isStaff: typing.Union[MetaOapg.properties.isStaff, bool, ],
                    dateJoined: typing.Union[MetaOapg.properties.dateJoined, str, datetime, ],
                    experiments: typing.Union[MetaOapg.properties.experiments, dict, frozendict.frozendict, ],
                    isSuperuser: typing.Union[MetaOapg.properties.isSuperuser, bool, ],
                    isActive: typing.Union[MetaOapg.properties.isActive, bool, ],
                    isManaged: typing.Union[MetaOapg.properties.isManaged, bool, ],
                    emails: typing.Union[MetaOapg.properties.emails, list, tuple, ],
                    has2fa: typing.Union[MetaOapg.properties.has2fa, bool, ],
                    name: typing.Union[MetaOapg.properties.name, str, ],
                    id: typing.Union[MetaOapg.properties.id, str, ],
                    email: typing.Union[MetaOapg.properties.email, str, ],
                    username: typing.Union[MetaOapg.properties.username, str, ],
                    identities: typing.Union[MetaOapg.properties.identities, list, tuple, schemas.Unset] = schemas.unset,
                    avatar: typing.Union[MetaOapg.properties.avatar, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'user':
                    return super().__new__(
                        cls,
                        *_args,
                        lastLogin=lastLogin,
                        lastActive=lastActive,
                        avatarUrl=avatarUrl,
                        hasPasswordAuth=hasPasswordAuth,
                        isStaff=isStaff,
                        dateJoined=dateJoined,
                        experiments=experiments,
                        isSuperuser=isSuperuser,
                        isActive=isActive,
                        isManaged=isManaged,
                        emails=emails,
                        has2fa=has2fa,
                        name=name,
                        id=id,
                        email=email,
                        username=username,
                        identities=identities,
                        avatar=avatar,
                        _configuration=_configuration,
                        **kwargs,
                    )
            role = schemas.StrSchema
            roleName = schemas.StrSchema
            orgRole = schemas.StrSchema
            
            
            class orgRolesFromTeams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "allowed",
                                "name",
                                "is_global",
                                "id",
                                "scopes",
                                "desc",
                            }
                            
                            class properties:
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                desc = schemas.StrSchema
                                
                                
                                class scopes(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'scopes':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                is_global = schemas.BoolSchema
                                allowed = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "desc": desc,
                                    "scopes": scopes,
                                    "is_global": is_global,
                                    "allowed": allowed,
                                }
                        
                        allowed: MetaOapg.properties.allowed
                        name: MetaOapg.properties.name
                        is_global: MetaOapg.properties.is_global
                        id: MetaOapg.properties.id
                        scopes: MetaOapg.properties.scopes
                        desc: MetaOapg.properties.desc
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_global"]) -> MetaOapg.properties.is_global: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "desc", "scopes", "is_global", "allowed", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_global"]) -> MetaOapg.properties.is_global: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "desc", "scopes", "is_global", "allowed", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            allowed: typing.Union[MetaOapg.properties.allowed, bool, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            is_global: typing.Union[MetaOapg.properties.is_global, bool, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            scopes: typing.Union[MetaOapg.properties.scopes, list, tuple, ],
                            desc: typing.Union[MetaOapg.properties.desc, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                allowed=allowed,
                                name=name,
                                is_global=is_global,
                                id=id,
                                scopes=scopes,
                                desc=desc,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orgRolesFromTeams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            pending = schemas.BoolSchema
            expired = schemas.StrSchema
            
            
            class flags(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "idp:role-restricted",
                        "sso:invalid",
                        "sso:linked",
                        "idp:provisioned",
                        "member-limit:restricted",
                    }
                    
                    class properties:
                        idpprovisioned = schemas.BoolSchema
                        idprole_restricted = schemas.BoolSchema
                        ssolinked = schemas.BoolSchema
                        ssoinvalid = schemas.BoolSchema
                        member_limitrestricted = schemas.BoolSchema
                        __annotations__ = {
                            "idp:provisioned": idpprovisioned,
                            "idp:role-restricted": idprole_restricted,
                            "sso:linked": ssolinked,
                            "sso:invalid": ssoinvalid,
                            "member-limit:restricted": member_limitrestricted,
                        }
                
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["idp:provisioned"]) -> MetaOapg.properties.idpprovisioned: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["idp:role-restricted"]) -> MetaOapg.properties.idprole_restricted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sso:linked"]) -> MetaOapg.properties.ssolinked: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sso:invalid"]) -> MetaOapg.properties.ssoinvalid: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["member-limit:restricted"]) -> MetaOapg.properties.member_limitrestricted: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["idp:provisioned", "idp:role-restricted", "sso:linked", "sso:invalid", "member-limit:restricted", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["idp:provisioned"]) -> MetaOapg.properties.idpprovisioned: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["idp:role-restricted"]) -> MetaOapg.properties.idprole_restricted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sso:linked"]) -> MetaOapg.properties.ssolinked: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sso:invalid"]) -> MetaOapg.properties.ssoinvalid: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["member-limit:restricted"]) -> MetaOapg.properties.member_limitrestricted: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idp:provisioned", "idp:role-restricted", "sso:linked", "sso:invalid", "member-limit:restricted", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'flags':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            dateCreated = schemas.DateTimeSchema
            inviteStatus = schemas.StrSchema
            
            
            class inviterName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inviterName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class teams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class teamRoles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "role",
                                "teamSlug",
                            }
                            
                            class properties:
                                teamSlug = schemas.StrSchema
                                role = schemas.StrSchema
                                __annotations__ = {
                                    "teamSlug": teamSlug,
                                    "role": role,
                                }
                        
                        role: MetaOapg.properties.role
                        teamSlug: MetaOapg.properties.teamSlug
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["teamSlug"]) -> MetaOapg.properties.teamSlug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["teamSlug", "role", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["teamSlug"]) -> MetaOapg.properties.teamSlug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["teamSlug", "role", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            role: typing.Union[MetaOapg.properties.role, str, ],
                            teamSlug: typing.Union[MetaOapg.properties.teamSlug, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                role=role,
                                teamSlug=teamSlug,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teamRoles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class invite_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invite_link':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            isOnlyOwner = schemas.BoolSchema
            
            
            class roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "allowed",
                                "name",
                                "is_global",
                                "id",
                                "scopes",
                                "desc",
                            }
                            
                            class properties:
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                desc = schemas.StrSchema
                                
                                
                                class scopes(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'scopes':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                is_global = schemas.BoolSchema
                                allowed = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "desc": desc,
                                    "scopes": scopes,
                                    "is_global": is_global,
                                    "allowed": allowed,
                                }
                        
                        allowed: MetaOapg.properties.allowed
                        name: MetaOapg.properties.name
                        is_global: MetaOapg.properties.is_global
                        id: MetaOapg.properties.id
                        scopes: MetaOapg.properties.scopes
                        desc: MetaOapg.properties.desc
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_global"]) -> MetaOapg.properties.is_global: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "desc", "scopes", "is_global", "allowed", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_global"]) -> MetaOapg.properties.is_global: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "desc", "scopes", "is_global", "allowed", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            allowed: typing.Union[MetaOapg.properties.allowed, bool, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            is_global: typing.Union[MetaOapg.properties.is_global, bool, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            scopes: typing.Union[MetaOapg.properties.scopes, list, tuple, ],
                            desc: typing.Union[MetaOapg.properties.desc, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                allowed=allowed,
                                name=name,
                                is_global=is_global,
                                id=id,
                                scopes=scopes,
                                desc=desc,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class orgRoleList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "allowed",
                                "name",
                                "is_global",
                                "id",
                                "scopes",
                                "desc",
                            }
                            
                            class properties:
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                desc = schemas.StrSchema
                                
                                
                                class scopes(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'scopes':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                is_global = schemas.BoolSchema
                                allowed = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "desc": desc,
                                    "scopes": scopes,
                                    "is_global": is_global,
                                    "allowed": allowed,
                                }
                        
                        allowed: MetaOapg.properties.allowed
                        name: MetaOapg.properties.name
                        is_global: MetaOapg.properties.is_global
                        id: MetaOapg.properties.id
                        scopes: MetaOapg.properties.scopes
                        desc: MetaOapg.properties.desc
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_global"]) -> MetaOapg.properties.is_global: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "desc", "scopes", "is_global", "allowed", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_global"]) -> MetaOapg.properties.is_global: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "desc", "scopes", "is_global", "allowed", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            allowed: typing.Union[MetaOapg.properties.allowed, bool, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            is_global: typing.Union[MetaOapg.properties.is_global, bool, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            scopes: typing.Union[MetaOapg.properties.scopes, list, tuple, ],
                            desc: typing.Union[MetaOapg.properties.desc, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                allowed=allowed,
                                name=name,
                                is_global=is_global,
                                id=id,
                                scopes=scopes,
                                desc=desc,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orgRoleList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class teamRoleList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "allowed",
                                "name",
                                "is_global",
                                "id",
                                "scopes",
                                "desc",
                            }
                            
                            class properties:
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                desc = schemas.StrSchema
                                
                                
                                class scopes(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'scopes':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                is_global = schemas.BoolSchema
                                allowed = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "desc": desc,
                                    "scopes": scopes,
                                    "is_global": is_global,
                                    "allowed": allowed,
                                }
                        
                        allowed: MetaOapg.properties.allowed
                        name: MetaOapg.properties.name
                        is_global: MetaOapg.properties.is_global
                        id: MetaOapg.properties.id
                        scopes: MetaOapg.properties.scopes
                        desc: MetaOapg.properties.desc
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_global"]) -> MetaOapg.properties.is_global: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "desc", "scopes", "is_global", "allowed", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_global"]) -> MetaOapg.properties.is_global: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["allowed"]) -> MetaOapg.properties.allowed: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "desc", "scopes", "is_global", "allowed", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            allowed: typing.Union[MetaOapg.properties.allowed, bool, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            is_global: typing.Union[MetaOapg.properties.is_global, bool, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            scopes: typing.Union[MetaOapg.properties.scopes, list, tuple, ],
                            desc: typing.Union[MetaOapg.properties.desc, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                allowed=allowed,
                                name=name,
                                is_global=is_global,
                                id=id,
                                scopes=scopes,
                                desc=desc,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teamRoleList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class externalUsers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "provider",
                                "externalName",
                                "integrationId",
                                "id",
                            }
                            
                            class properties:
                                externalId = schemas.StrSchema
                                userId = schemas.StrSchema
                                teamId = schemas.StrSchema
                                id = schemas.StrSchema
                                provider = schemas.StrSchema
                                externalName = schemas.StrSchema
                                integrationId = schemas.StrSchema
                                __annotations__ = {
                                    "externalId": externalId,
                                    "userId": userId,
                                    "teamId": teamId,
                                    "id": id,
                                    "provider": provider,
                                    "externalName": externalName,
                                    "integrationId": integrationId,
                                }
                        
                        provider: MetaOapg.properties.provider
                        externalName: MetaOapg.properties.externalName
                        integrationId: MetaOapg.properties.integrationId
                        id: MetaOapg.properties.id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["teamId"]) -> MetaOapg.properties.teamId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["externalName"]) -> MetaOapg.properties.externalName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["integrationId"]) -> MetaOapg.properties.integrationId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["externalId", "userId", "teamId", "id", "provider", "externalName", "integrationId", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["teamId"]) -> typing.Union[MetaOapg.properties.teamId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["externalName"]) -> MetaOapg.properties.externalName: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["integrationId"]) -> MetaOapg.properties.integrationId: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["externalId", "userId", "teamId", "id", "provider", "externalName", "integrationId", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            provider: typing.Union[MetaOapg.properties.provider, str, ],
                            externalName: typing.Union[MetaOapg.properties.externalName, str, ],
                            integrationId: typing.Union[MetaOapg.properties.integrationId, str, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            externalId: typing.Union[MetaOapg.properties.externalId, str, schemas.Unset] = schemas.unset,
                            userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
                            teamId: typing.Union[MetaOapg.properties.teamId, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                provider=provider,
                                externalName=externalName,
                                integrationId=integrationId,
                                id=id,
                                externalId=externalId,
                                userId=userId,
                                teamId=teamId,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'externalUsers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "email": email,
                "name": name,
                "user": user,
                "role": role,
                "roleName": roleName,
                "orgRole": orgRole,
                "orgRolesFromTeams": orgRolesFromTeams,
                "pending": pending,
                "expired": expired,
                "flags": flags,
                "dateCreated": dateCreated,
                "inviteStatus": inviteStatus,
                "inviterName": inviterName,
                "teams": teams,
                "teamRoles": teamRoles,
                "invite_link": invite_link,
                "isOnlyOwner": isOnlyOwner,
                "roles": roles,
                "orgRoleList": orgRoleList,
                "teamRoleList": teamRoleList,
                "externalUsers": externalUsers,
            }
    
    orgRoleList: MetaOapg.properties.orgRoleList
    role: MetaOapg.properties.role
    teams: MetaOapg.properties.teams
    inviteStatus: MetaOapg.properties.inviteStatus
    pending: MetaOapg.properties.pending
    roles: MetaOapg.properties.roles
    flags: MetaOapg.properties.flags
    isOnlyOwner: MetaOapg.properties.isOnlyOwner
    invite_link: MetaOapg.properties.invite_link
    teamRoles: MetaOapg.properties.teamRoles
    inviterName: MetaOapg.properties.inviterName
    teamRoleList: MetaOapg.properties.teamRoleList
    dateCreated: MetaOapg.properties.dateCreated
    expired: MetaOapg.properties.expired
    orgRole: MetaOapg.properties.orgRole
    orgRolesFromTeams: MetaOapg.properties.orgRolesFromTeams
    name: MetaOapg.properties.name
    roleName: MetaOapg.properties.roleName
    id: MetaOapg.properties.id
    user: MetaOapg.properties.user
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleName"]) -> MetaOapg.properties.roleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgRole"]) -> MetaOapg.properties.orgRole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgRolesFromTeams"]) -> MetaOapg.properties.orgRolesFromTeams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expired"]) -> MetaOapg.properties.expired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inviteStatus"]) -> MetaOapg.properties.inviteStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inviterName"]) -> MetaOapg.properties.inviterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teamRoles"]) -> MetaOapg.properties.teamRoles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invite_link"]) -> MetaOapg.properties.invite_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isOnlyOwner"]) -> MetaOapg.properties.isOnlyOwner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgRoleList"]) -> MetaOapg.properties.orgRoleList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teamRoleList"]) -> MetaOapg.properties.teamRoleList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalUsers"]) -> MetaOapg.properties.externalUsers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "email", "name", "user", "role", "roleName", "orgRole", "orgRolesFromTeams", "pending", "expired", "flags", "dateCreated", "inviteStatus", "inviterName", "teams", "teamRoles", "invite_link", "isOnlyOwner", "roles", "orgRoleList", "teamRoleList", "externalUsers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleName"]) -> MetaOapg.properties.roleName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgRole"]) -> MetaOapg.properties.orgRole: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgRolesFromTeams"]) -> MetaOapg.properties.orgRolesFromTeams: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expired"]) -> MetaOapg.properties.expired: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags"]) -> MetaOapg.properties.flags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inviteStatus"]) -> MetaOapg.properties.inviteStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inviterName"]) -> MetaOapg.properties.inviterName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teamRoles"]) -> MetaOapg.properties.teamRoles: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invite_link"]) -> MetaOapg.properties.invite_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isOnlyOwner"]) -> MetaOapg.properties.isOnlyOwner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgRoleList"]) -> MetaOapg.properties.orgRoleList: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teamRoleList"]) -> MetaOapg.properties.teamRoleList: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalUsers"]) -> typing.Union[MetaOapg.properties.externalUsers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "email", "name", "user", "role", "roleName", "orgRole", "orgRolesFromTeams", "pending", "expired", "flags", "dateCreated", "inviteStatus", "inviterName", "teams", "teamRoles", "invite_link", "isOnlyOwner", "roles", "orgRoleList", "teamRoleList", "externalUsers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        orgRoleList: typing.Union[MetaOapg.properties.orgRoleList, list, tuple, ],
        role: typing.Union[MetaOapg.properties.role, str, ],
        teams: typing.Union[MetaOapg.properties.teams, list, tuple, ],
        inviteStatus: typing.Union[MetaOapg.properties.inviteStatus, str, ],
        pending: typing.Union[MetaOapg.properties.pending, bool, ],
        roles: typing.Union[MetaOapg.properties.roles, list, tuple, ],
        flags: typing.Union[MetaOapg.properties.flags, dict, frozendict.frozendict, ],
        isOnlyOwner: typing.Union[MetaOapg.properties.isOnlyOwner, bool, ],
        invite_link: typing.Union[MetaOapg.properties.invite_link, None, str, ],
        teamRoles: typing.Union[MetaOapg.properties.teamRoles, list, tuple, ],
        inviterName: typing.Union[MetaOapg.properties.inviterName, None, str, ],
        teamRoleList: typing.Union[MetaOapg.properties.teamRoleList, list, tuple, ],
        dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
        expired: typing.Union[MetaOapg.properties.expired, str, ],
        orgRole: typing.Union[MetaOapg.properties.orgRole, str, ],
        orgRolesFromTeams: typing.Union[MetaOapg.properties.orgRolesFromTeams, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        roleName: typing.Union[MetaOapg.properties.roleName, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        externalUsers: typing.Union[MetaOapg.properties.externalUsers, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrganizationMemberWithRoles':
        return super().__new__(
            cls,
            *_args,
            orgRoleList=orgRoleList,
            role=role,
            teams=teams,
            inviteStatus=inviteStatus,
            pending=pending,
            roles=roles,
            flags=flags,
            isOnlyOwner=isOnlyOwner,
            invite_link=invite_link,
            teamRoles=teamRoles,
            inviterName=inviterName,
            teamRoleList=teamRoleList,
            dateCreated=dateCreated,
            expired=expired,
            orgRole=orgRole,
            orgRolesFromTeams=orgRolesFromTeams,
            name=name,
            roleName=roleName,
            id=id,
            user=user,
            email=email,
            externalUsers=externalUsers,
            _configuration=_configuration,
            **kwargs,
        )
