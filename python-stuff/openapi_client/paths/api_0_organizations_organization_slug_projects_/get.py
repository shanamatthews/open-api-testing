# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# Query params


class CursorSchema(
    schemas.StrSchema
):


    class MetaOapg:
        min_length = 1
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'cursor': typing.Union[CursorSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
# Path params
OrganizationSlugSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'organization_slug': typing.Union[OrganizationSlugSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_organization_slug = api_client.PathParameter(
    name="organization_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OrganizationSlugSchema,
    required=True,
)
_auth = [
    'auth_token',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "isBookmarked",
                    "eventProcessing",
                    "access",
                    "hasSessions",
                    "teams",
                    "environments",
                    "hasAccess",
                    "hasMonitors",
                    "isMember",
                    "team",
                    "hasUserReports",
                    "firstTransactionEvent",
                    "platform",
                    "platforms",
                    "latestRelease",
                    "features",
                    "hasReplays",
                    "dateCreated",
                    "hasProfiles",
                    "firstEvent",
                    "name",
                    "id",
                    "slug",
                }
                
                class properties:
                    
                    
                    class latestDeploys(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class additional_properties(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    additional_properties = schemas.StrSchema
                                
                                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                    return super().get_item_oapg(name)
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                                ) -> 'additional_properties':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        
                        def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                        ) -> 'latestDeploys':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    stats = schemas.AnyTypeSchema
                    transactionStats = schemas.AnyTypeSchema
                    sessionStats = schemas.AnyTypeSchema
                    id = schemas.StrSchema
                    slug = schemas.StrSchema
                    name = schemas.StrSchema
                    
                    
                    class platform(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'platform':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    dateCreated = schemas.DateTimeSchema
                    isBookmarked = schemas.BoolSchema
                    isMember = schemas.BoolSchema
                    
                    
                    class features(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'features':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class firstEvent(
                        schemas.DateTimeBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            format = 'date-time'
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, datetime, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'firstEvent':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    firstTransactionEvent = schemas.BoolSchema
                    
                    
                    class access(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'access':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    hasAccess = schemas.BoolSchema
                    hasMonitors = schemas.BoolSchema
                    hasProfiles = schemas.BoolSchema
                    hasReplays = schemas.BoolSchema
                    hasSessions = schemas.BoolSchema
                    
                    
                    class team(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "name",
                                "id",
                                "slug",
                            }
                            
                            class properties:
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                slug = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "slug": slug,
                                }
                    
                        
                        name: MetaOapg.properties.name
                        id: MetaOapg.properties.id
                        slug: MetaOapg.properties.slug
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'team':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class teams(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    required = {
                                        "name",
                                        "id",
                                        "slug",
                                    }
                                    
                                    class properties:
                                        id = schemas.StrSchema
                                        name = schemas.StrSchema
                                        slug = schemas.StrSchema
                                        __annotations__ = {
                                            "id": id,
                                            "name": name,
                                            "slug": slug,
                                        }
                                
                                name: MetaOapg.properties.name
                                id: MetaOapg.properties.id
                                slug: MetaOapg.properties.slug
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "slug", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    name: typing.Union[MetaOapg.properties.name, str, ],
                                    id: typing.Union[MetaOapg.properties.id, str, ],
                                    slug: typing.Union[MetaOapg.properties.slug, str, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        name=name,
                                        id=id,
                                        slug=slug,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'teams':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class eventProcessing(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "symbolicationDegraded",
                            }
                            
                            class properties:
                                symbolicationDegraded = schemas.BoolSchema
                                __annotations__ = {
                                    "symbolicationDegraded": symbolicationDegraded,
                                }
                        
                        symbolicationDegraded: MetaOapg.properties.symbolicationDegraded
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["symbolicationDegraded"]) -> MetaOapg.properties.symbolicationDegraded: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["symbolicationDegraded", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["symbolicationDegraded"]) -> MetaOapg.properties.symbolicationDegraded: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["symbolicationDegraded", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            symbolicationDegraded: typing.Union[MetaOapg.properties.symbolicationDegraded, bool, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'eventProcessing':
                            return super().__new__(
                                cls,
                                *_args,
                                symbolicationDegraded=symbolicationDegraded,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class platforms(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'platforms':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    hasUserReports = schemas.BoolSchema
                    
                    
                    class environments(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'environments':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    
                    class latestRelease(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "version",
                            }
                            
                            class properties:
                                version = schemas.StrSchema
                                __annotations__ = {
                                    "version": version,
                                }
                    
                        
                        version: MetaOapg.properties.version
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'latestRelease':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "latestDeploys": latestDeploys,
                        "stats": stats,
                        "transactionStats": transactionStats,
                        "sessionStats": sessionStats,
                        "id": id,
                        "slug": slug,
                        "name": name,
                        "platform": platform,
                        "dateCreated": dateCreated,
                        "isBookmarked": isBookmarked,
                        "isMember": isMember,
                        "features": features,
                        "firstEvent": firstEvent,
                        "firstTransactionEvent": firstTransactionEvent,
                        "access": access,
                        "hasAccess": hasAccess,
                        "hasMonitors": hasMonitors,
                        "hasProfiles": hasProfiles,
                        "hasReplays": hasReplays,
                        "hasSessions": hasSessions,
                        "team": team,
                        "teams": teams,
                        "eventProcessing": eventProcessing,
                        "platforms": platforms,
                        "hasUserReports": hasUserReports,
                        "environments": environments,
                        "latestRelease": latestRelease,
                    }
            
            isBookmarked: MetaOapg.properties.isBookmarked
            eventProcessing: MetaOapg.properties.eventProcessing
            access: MetaOapg.properties.access
            hasSessions: MetaOapg.properties.hasSessions
            teams: MetaOapg.properties.teams
            environments: MetaOapg.properties.environments
            hasAccess: MetaOapg.properties.hasAccess
            hasMonitors: MetaOapg.properties.hasMonitors
            isMember: MetaOapg.properties.isMember
            team: MetaOapg.properties.team
            hasUserReports: MetaOapg.properties.hasUserReports
            firstTransactionEvent: MetaOapg.properties.firstTransactionEvent
            platform: MetaOapg.properties.platform
            platforms: MetaOapg.properties.platforms
            latestRelease: MetaOapg.properties.latestRelease
            features: MetaOapg.properties.features
            hasReplays: MetaOapg.properties.hasReplays
            dateCreated: MetaOapg.properties.dateCreated
            hasProfiles: MetaOapg.properties.hasProfiles
            firstEvent: MetaOapg.properties.firstEvent
            name: MetaOapg.properties.name
            id: MetaOapg.properties.id
            slug: MetaOapg.properties.slug
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["latestDeploys"]) -> MetaOapg.properties.latestDeploys: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transactionStats"]) -> MetaOapg.properties.transactionStats: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["sessionStats"]) -> MetaOapg.properties.sessionStats: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["firstTransactionEvent"]) -> MetaOapg.properties.firstTransactionEvent: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hasMonitors"]) -> MetaOapg.properties.hasMonitors: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hasProfiles"]) -> MetaOapg.properties.hasProfiles: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hasReplays"]) -> MetaOapg.properties.hasReplays: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hasSessions"]) -> MetaOapg.properties.hasSessions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["eventProcessing"]) -> MetaOapg.properties.eventProcessing: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["platforms"]) -> MetaOapg.properties.platforms: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hasUserReports"]) -> MetaOapg.properties.hasUserReports: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["environments"]) -> MetaOapg.properties.environments: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["latestRelease"]) -> MetaOapg.properties.latestRelease: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["latestDeploys", "stats", "transactionStats", "sessionStats", "id", "slug", "name", "platform", "dateCreated", "isBookmarked", "isMember", "features", "firstEvent", "firstTransactionEvent", "access", "hasAccess", "hasMonitors", "hasProfiles", "hasReplays", "hasSessions", "team", "teams", "eventProcessing", "platforms", "hasUserReports", "environments", "latestRelease", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["latestDeploys"]) -> typing.Union[MetaOapg.properties.latestDeploys, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> typing.Union[MetaOapg.properties.stats, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transactionStats"]) -> typing.Union[MetaOapg.properties.transactionStats, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["sessionStats"]) -> typing.Union[MetaOapg.properties.sessionStats, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["isMember"]) -> MetaOapg.properties.isMember: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["features"]) -> MetaOapg.properties.features: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["firstTransactionEvent"]) -> MetaOapg.properties.firstTransactionEvent: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hasAccess"]) -> MetaOapg.properties.hasAccess: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hasMonitors"]) -> MetaOapg.properties.hasMonitors: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hasProfiles"]) -> MetaOapg.properties.hasProfiles: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hasReplays"]) -> MetaOapg.properties.hasReplays: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hasSessions"]) -> MetaOapg.properties.hasSessions: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["teams"]) -> MetaOapg.properties.teams: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["eventProcessing"]) -> MetaOapg.properties.eventProcessing: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["platforms"]) -> MetaOapg.properties.platforms: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hasUserReports"]) -> MetaOapg.properties.hasUserReports: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["environments"]) -> MetaOapg.properties.environments: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["latestRelease"]) -> MetaOapg.properties.latestRelease: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["latestDeploys", "stats", "transactionStats", "sessionStats", "id", "slug", "name", "platform", "dateCreated", "isBookmarked", "isMember", "features", "firstEvent", "firstTransactionEvent", "access", "hasAccess", "hasMonitors", "hasProfiles", "hasReplays", "hasSessions", "team", "teams", "eventProcessing", "platforms", "hasUserReports", "environments", "latestRelease", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                isBookmarked: typing.Union[MetaOapg.properties.isBookmarked, bool, ],
                eventProcessing: typing.Union[MetaOapg.properties.eventProcessing, dict, frozendict.frozendict, ],
                access: typing.Union[MetaOapg.properties.access, list, tuple, ],
                hasSessions: typing.Union[MetaOapg.properties.hasSessions, bool, ],
                teams: typing.Union[MetaOapg.properties.teams, list, tuple, ],
                environments: typing.Union[MetaOapg.properties.environments, list, tuple, ],
                hasAccess: typing.Union[MetaOapg.properties.hasAccess, bool, ],
                hasMonitors: typing.Union[MetaOapg.properties.hasMonitors, bool, ],
                isMember: typing.Union[MetaOapg.properties.isMember, bool, ],
                team: typing.Union[MetaOapg.properties.team, dict, frozendict.frozendict, None, ],
                hasUserReports: typing.Union[MetaOapg.properties.hasUserReports, bool, ],
                firstTransactionEvent: typing.Union[MetaOapg.properties.firstTransactionEvent, bool, ],
                platform: typing.Union[MetaOapg.properties.platform, None, str, ],
                platforms: typing.Union[MetaOapg.properties.platforms, list, tuple, ],
                latestRelease: typing.Union[MetaOapg.properties.latestRelease, dict, frozendict.frozendict, None, ],
                features: typing.Union[MetaOapg.properties.features, list, tuple, ],
                hasReplays: typing.Union[MetaOapg.properties.hasReplays, bool, ],
                dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, datetime, ],
                hasProfiles: typing.Union[MetaOapg.properties.hasProfiles, bool, ],
                firstEvent: typing.Union[MetaOapg.properties.firstEvent, None, str, datetime, ],
                name: typing.Union[MetaOapg.properties.name, str, ],
                id: typing.Union[MetaOapg.properties.id, str, ],
                slug: typing.Union[MetaOapg.properties.slug, str, ],
                latestDeploys: typing.Union[MetaOapg.properties.latestDeploys, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                stats: typing.Union[MetaOapg.properties.stats, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                transactionStats: typing.Union[MetaOapg.properties.transactionStats, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                sessionStats: typing.Union[MetaOapg.properties.sessionStats, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    isBookmarked=isBookmarked,
                    eventProcessing=eventProcessing,
                    access=access,
                    hasSessions=hasSessions,
                    teams=teams,
                    environments=environments,
                    hasAccess=hasAccess,
                    hasMonitors=hasMonitors,
                    isMember=isMember,
                    team=team,
                    hasUserReports=hasUserReports,
                    firstTransactionEvent=firstTransactionEvent,
                    platform=platform,
                    platforms=platforms,
                    latestRelease=latestRelease,
                    features=features,
                    hasReplays=hasReplays,
                    dateCreated=dateCreated,
                    hasProfiles=hasProfiles,
                    firstEvent=firstEvent,
                    name=name,
                    id=id,
                    slug=slug,
                    latestDeploys=latestDeploys,
                    stats=stats,
                    transactionStats=transactionStats,
                    sessionStats=sessionStats,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)
_status_code_to_response = {
    '200': _response_for_200,
    '401': _response_for_401,
    '403': _response_for_403,
    '404': _response_for_404,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _list_an_organizations_projects_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _list_an_organizations_projects_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _list_an_organizations_projects_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _list_an_organizations_projects_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_organization_slug,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_cursor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ListAnOrganizationsProjects(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_an_organizations_projects(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def list_an_organizations_projects(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def list_an_organizations_projects(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def list_an_organizations_projects(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_an_organizations_projects_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_an_organizations_projects_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


