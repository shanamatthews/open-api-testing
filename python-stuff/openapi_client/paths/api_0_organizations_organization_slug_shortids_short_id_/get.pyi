# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# Path params
OrganizationSlugSchema = schemas.StrSchema
ShortIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'organization_slug': typing.Union[OrganizationSlugSchema, str, ],
        'short_id': typing.Union[ShortIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_organization_slug = api_client.PathParameter(
    name="organization_slug",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OrganizationSlugSchema,
    required=True,
)
request_path_short_id = api_client.PathParameter(
    name="short_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ShortIdSchema,
    required=True,
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "shortId",
            "organizationSlug",
            "groupId",
            "projectSlug",
            "group",
        }
        
        class properties:
            organizationSlug = schemas.StrSchema
            projectSlug = schemas.StrSchema
            shortId = schemas.StrSchema
            
            
            class group(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "isBookmarked",
                        "shortId",
                        "metadata",
                        "logger",
                        "annotations",
                        "project",
                        "title",
                        "type",
                        "assignedTo",
                        "isSubscribed",
                        "isPublic",
                        "id",
                        "level",
                        "firstSeen",
                        "count",
                        "shareId",
                        "culprit",
                        "numComments",
                        "subscriptionDetails",
                        "lastSeen",
                        "userCount",
                        "statusDetails",
                        "hasSeen",
                        "permalink",
                        "status",
                    }
                    
                    class properties:
                        lastSeen = schemas.StrSchema
                        numComments = schemas.IntSchema
                        userCount = schemas.IntSchema
                        
                        
                        class culprit(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'culprit':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        title = schemas.StrSchema
                        id = schemas.StrSchema
                        
                        
                        class assignedTo(
                            schemas.DictBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneFrozenDictMixin
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    type = schemas.StrSchema
                                    id = schemas.StrSchema
                                    name = schemas.StrSchema
                                    __annotations__ = {
                                        "type": type,
                                        "id": id,
                                        "name": name,
                                    }
                        
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", "name", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", "name", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'assignedTo':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    type=type,
                                    id=id,
                                    name=name,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class logger(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'logger':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        type = schemas.StrSchema
                        
                        
                        class annotations(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'annotations':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class metadata(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    function = schemas.StrSchema
                                    title = schemas.StrSchema
                                    type = schemas.StrSchema
                                    value = schemas.StrSchema
                                    filename = schemas.StrSchema
                                    __annotations__ = {
                                        "function": function,
                                        "title": title,
                                        "type": type,
                                        "value": value,
                                        "filename": filename,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["function"]) -> MetaOapg.properties.function: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["function", "title", "type", "value", "filename", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["function"]) -> typing.Union[MetaOapg.properties.function, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> typing.Union[MetaOapg.properties.filename, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["function", "title", "type", "value", "filename", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                function: typing.Union[MetaOapg.properties.function, str, schemas.Unset] = schemas.unset,
                                title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
                                filename: typing.Union[MetaOapg.properties.filename, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'metadata':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    function=function,
                                    title=title,
                                    type=type,
                                    value=value,
                                    filename=filename,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class status(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def RESOLVED(cls):
                                return cls("resolved")
                            
                            @schemas.classproperty
                            def UNRESOLVED(cls):
                                return cls("unresolved")
                            
                            @schemas.classproperty
                            def IGNORED(cls):
                                return cls("ignored")
                        
                        
                        class subscriptionDetails(
                            schemas.DictBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneFrozenDictMixin
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    reason = schemas.StrSchema
                                    __annotations__ = {
                                        "reason": reason,
                                    }
                        
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["reason", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reason", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'subscriptionDetails':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    reason=reason,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        isPublic = schemas.BoolSchema
                        hasSeen = schemas.BoolSchema
                        shortId = schemas.StrSchema
                        
                        
                        class shareId(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'shareId':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        firstSeen = schemas.StrSchema
                        count = schemas.StrSchema
                        permalink = schemas.StrSchema
                        level = schemas.StrSchema
                        isSubscribed = schemas.BoolSchema
                        isBookmarked = schemas.BoolSchema
                        
                        
                        class project(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    slug = schemas.StrSchema
                                    id = schemas.StrSchema
                                    name = schemas.StrSchema
                                    __annotations__ = {
                                        "slug": slug,
                                        "id": id,
                                        "name": name,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["slug", "id", "name", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["slug", "id", "name", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'project':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    slug=slug,
                                    id=id,
                                    name=name,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        statusDetails = schemas.DictSchema
                        __annotations__ = {
                            "lastSeen": lastSeen,
                            "numComments": numComments,
                            "userCount": userCount,
                            "culprit": culprit,
                            "title": title,
                            "id": id,
                            "assignedTo": assignedTo,
                            "logger": logger,
                            "type": type,
                            "annotations": annotations,
                            "metadata": metadata,
                            "status": status,
                            "subscriptionDetails": subscriptionDetails,
                            "isPublic": isPublic,
                            "hasSeen": hasSeen,
                            "shortId": shortId,
                            "shareId": shareId,
                            "firstSeen": firstSeen,
                            "count": count,
                            "permalink": permalink,
                            "level": level,
                            "isSubscribed": isSubscribed,
                            "isBookmarked": isBookmarked,
                            "project": project,
                            "statusDetails": statusDetails,
                        }
                
                isBookmarked: MetaOapg.properties.isBookmarked
                shortId: MetaOapg.properties.shortId
                metadata: MetaOapg.properties.metadata
                logger: MetaOapg.properties.logger
                annotations: MetaOapg.properties.annotations
                project: MetaOapg.properties.project
                title: MetaOapg.properties.title
                type: MetaOapg.properties.type
                assignedTo: MetaOapg.properties.assignedTo
                isSubscribed: MetaOapg.properties.isSubscribed
                isPublic: MetaOapg.properties.isPublic
                id: MetaOapg.properties.id
                level: MetaOapg.properties.level
                firstSeen: MetaOapg.properties.firstSeen
                count: MetaOapg.properties.count
                shareId: MetaOapg.properties.shareId
                culprit: MetaOapg.properties.culprit
                numComments: MetaOapg.properties.numComments
                subscriptionDetails: MetaOapg.properties.subscriptionDetails
                lastSeen: MetaOapg.properties.lastSeen
                userCount: MetaOapg.properties.userCount
                statusDetails: MetaOapg.properties.statusDetails
                hasSeen: MetaOapg.properties.hasSeen
                permalink: MetaOapg.properties.permalink
                status: MetaOapg.properties.status
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastSeen"]) -> MetaOapg.properties.lastSeen: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["numComments"]) -> MetaOapg.properties.numComments: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["userCount"]) -> MetaOapg.properties.userCount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["culprit"]) -> MetaOapg.properties.culprit: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["assignedTo"]) -> MetaOapg.properties.assignedTo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["logger"]) -> MetaOapg.properties.logger: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["subscriptionDetails"]) -> MetaOapg.properties.subscriptionDetails: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["hasSeen"]) -> MetaOapg.properties.hasSeen: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["shortId"]) -> MetaOapg.properties.shortId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["shareId"]) -> MetaOapg.properties.shareId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["firstSeen"]) -> MetaOapg.properties.firstSeen: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isSubscribed"]) -> MetaOapg.properties.isSubscribed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["statusDetails"]) -> MetaOapg.properties.statusDetails: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["lastSeen", "numComments", "userCount", "culprit", "title", "id", "assignedTo", "logger", "type", "annotations", "metadata", "status", "subscriptionDetails", "isPublic", "hasSeen", "shortId", "shareId", "firstSeen", "count", "permalink", "level", "isSubscribed", "isBookmarked", "project", "statusDetails", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastSeen"]) -> MetaOapg.properties.lastSeen: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["numComments"]) -> MetaOapg.properties.numComments: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["userCount"]) -> MetaOapg.properties.userCount: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["culprit"]) -> MetaOapg.properties.culprit: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["assignedTo"]) -> MetaOapg.properties.assignedTo: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["logger"]) -> MetaOapg.properties.logger: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["subscriptionDetails"]) -> MetaOapg.properties.subscriptionDetails: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["hasSeen"]) -> MetaOapg.properties.hasSeen: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["shortId"]) -> MetaOapg.properties.shortId: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["shareId"]) -> MetaOapg.properties.shareId: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["firstSeen"]) -> MetaOapg.properties.firstSeen: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isSubscribed"]) -> MetaOapg.properties.isSubscribed: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["statusDetails"]) -> MetaOapg.properties.statusDetails: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lastSeen", "numComments", "userCount", "culprit", "title", "id", "assignedTo", "logger", "type", "annotations", "metadata", "status", "subscriptionDetails", "isPublic", "hasSeen", "shortId", "shareId", "firstSeen", "count", "permalink", "level", "isSubscribed", "isBookmarked", "project", "statusDetails", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    isBookmarked: typing.Union[MetaOapg.properties.isBookmarked, bool, ],
                    shortId: typing.Union[MetaOapg.properties.shortId, str, ],
                    metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, ],
                    logger: typing.Union[MetaOapg.properties.logger, None, str, ],
                    annotations: typing.Union[MetaOapg.properties.annotations, list, tuple, ],
                    project: typing.Union[MetaOapg.properties.project, dict, frozendict.frozendict, ],
                    title: typing.Union[MetaOapg.properties.title, str, ],
                    type: typing.Union[MetaOapg.properties.type, str, ],
                    assignedTo: typing.Union[MetaOapg.properties.assignedTo, dict, frozendict.frozendict, None, ],
                    isSubscribed: typing.Union[MetaOapg.properties.isSubscribed, bool, ],
                    isPublic: typing.Union[MetaOapg.properties.isPublic, bool, ],
                    id: typing.Union[MetaOapg.properties.id, str, ],
                    level: typing.Union[MetaOapg.properties.level, str, ],
                    firstSeen: typing.Union[MetaOapg.properties.firstSeen, str, ],
                    count: typing.Union[MetaOapg.properties.count, str, ],
                    shareId: typing.Union[MetaOapg.properties.shareId, None, str, ],
                    culprit: typing.Union[MetaOapg.properties.culprit, None, str, ],
                    numComments: typing.Union[MetaOapg.properties.numComments, decimal.Decimal, int, ],
                    subscriptionDetails: typing.Union[MetaOapg.properties.subscriptionDetails, dict, frozendict.frozendict, None, ],
                    lastSeen: typing.Union[MetaOapg.properties.lastSeen, str, ],
                    userCount: typing.Union[MetaOapg.properties.userCount, decimal.Decimal, int, ],
                    statusDetails: typing.Union[MetaOapg.properties.statusDetails, dict, frozendict.frozendict, ],
                    hasSeen: typing.Union[MetaOapg.properties.hasSeen, bool, ],
                    permalink: typing.Union[MetaOapg.properties.permalink, str, ],
                    status: typing.Union[MetaOapg.properties.status, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'group':
                    return super().__new__(
                        cls,
                        *_args,
                        isBookmarked=isBookmarked,
                        shortId=shortId,
                        metadata=metadata,
                        logger=logger,
                        annotations=annotations,
                        project=project,
                        title=title,
                        type=type,
                        assignedTo=assignedTo,
                        isSubscribed=isSubscribed,
                        isPublic=isPublic,
                        id=id,
                        level=level,
                        firstSeen=firstSeen,
                        count=count,
                        shareId=shareId,
                        culprit=culprit,
                        numComments=numComments,
                        subscriptionDetails=subscriptionDetails,
                        lastSeen=lastSeen,
                        userCount=userCount,
                        statusDetails=statusDetails,
                        hasSeen=hasSeen,
                        permalink=permalink,
                        status=status,
                        _configuration=_configuration,
                        **kwargs,
                    )
            groupId = schemas.StrSchema
            __annotations__ = {
                "organizationSlug": organizationSlug,
                "projectSlug": projectSlug,
                "shortId": shortId,
                "group": group,
                "groupId": groupId,
            }
    
    shortId: MetaOapg.properties.shortId
    organizationSlug: MetaOapg.properties.organizationSlug
    groupId: MetaOapg.properties.groupId
    projectSlug: MetaOapg.properties.projectSlug
    group: MetaOapg.properties.group
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationSlug"]) -> MetaOapg.properties.organizationSlug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectSlug"]) -> MetaOapg.properties.projectSlug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortId"]) -> MetaOapg.properties.shortId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["organizationSlug", "projectSlug", "shortId", "group", "groupId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationSlug"]) -> MetaOapg.properties.organizationSlug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectSlug"]) -> MetaOapg.properties.projectSlug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortId"]) -> MetaOapg.properties.shortId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["organizationSlug", "projectSlug", "shortId", "group", "groupId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        shortId: typing.Union[MetaOapg.properties.shortId, str, ],
        organizationSlug: typing.Union[MetaOapg.properties.organizationSlug, str, ],
        groupId: typing.Union[MetaOapg.properties.groupId, str, ],
        projectSlug: typing.Union[MetaOapg.properties.projectSlug, str, ],
        group: typing.Union[MetaOapg.properties.group, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            shortId=shortId,
            organizationSlug=organizationSlug,
            groupId=groupId,
            projectSlug=projectSlug,
            group=group,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _resolve_a_short_id_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _resolve_a_short_id_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _resolve_a_short_id_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _resolve_a_short_id_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_organization_slug,
            request_path_short_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ResolveAShortId(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def resolve_a_short_id(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def resolve_a_short_id(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def resolve_a_short_id(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def resolve_a_short_id(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._resolve_a_short_id_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._resolve_a_short_id_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


