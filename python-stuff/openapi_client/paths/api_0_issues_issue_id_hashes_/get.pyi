# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# Query params
CursorSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'cursor': typing.Union[CursorSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
# Path params
IssueIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'issue_id': typing.Union[IssueIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_issue_id = api_client.PathParameter(
    name="issue_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IssueIdSchema,
    required=True,
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class latestEvent(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "eventID",
                                "metadata",
                                "groupID",
                                "_meta",
                                "dist",
                                "contexts",
                                "message",
                                "packages",
                                "title",
                                "type",
                                "platform",
                                "fingerprints",
                                "tags",
                                "entries",
                                "dateCreated",
                                "size",
                                "dateReceived",
                                "context",
                                "id",
                                "sdk",
                                "user",
                                "errors",
                            }
                            
                            class properties:
                                eventID = schemas.StrSchema
                                
                                
                                class dist(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'dist':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                        )
                                message = schemas.StrSchema
                                id = schemas.StrSchema
                                size = schemas.IntSchema
                                
                                
                                class errors(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    message = schemas.StrSchema
                                                    type = schemas.StrSchema
                                                    data = schemas.DictSchema
                                                    __annotations__ = {
                                                        "message": message,
                                                        "type": type,
                                                        "data": data,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "type", "data", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "type", "data", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
                                                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    message=message,
                                                    type=type,
                                                    data=data,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'errors':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                platform = schemas.StrSchema
                                type = schemas.StrSchema
                                
                                
                                class metadata(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class one_of_0(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "type",
                                                    "value",
                                                }
                                                
                                                class properties:
                                                    type = schemas.StrSchema
                                                    value = schemas.StrSchema
                                                    __annotations__ = {
                                                        "type": type,
                                                        "value": value,
                                                    }
                                            
                                            type: MetaOapg.properties.type
                                            value: MetaOapg.properties.value
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "value", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "value", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                type: typing.Union[MetaOapg.properties.type, str, ],
                                                value: typing.Union[MetaOapg.properties.value, str, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'one_of_0':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    type=type,
                                                    value=value,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        
                                        class one_of_1(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "title",
                                                }
                                                
                                                class properties:
                                                    title = schemas.StrSchema
                                                    __annotations__ = {
                                                        "title": title,
                                                    }
                                            
                                            title: MetaOapg.properties.title
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                title: typing.Union[MetaOapg.properties.title, str, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'one_of_1':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    title=title,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.one_of_0,
                                                cls.one_of_1,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'metadata':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class tags(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    
                                                    
                                                    class _meta(
                                                        schemas.StrBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneStrMixin
                                                    ):
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[None, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> '_meta':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                _configuration=_configuration,
                                                            )
                                                    key = schemas.StrSchema
                                                    value = schemas.StrSchema
                                                    __annotations__ = {
                                                        "_meta": _meta,
                                                        "key": key,
                                                        "value": value,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["_meta"]) -> MetaOapg.properties._meta: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["_meta", "key", "value", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["_meta"]) -> typing.Union[MetaOapg.properties._meta, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_meta", "key", "value", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                _meta: typing.Union[MetaOapg.properties._meta, None, str, schemas.Unset] = schemas.unset,
                                                key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
                                                value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    _meta=_meta,
                                                    key=key,
                                                    value=value,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'tags':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                dateCreated = schemas.StrSchema
                                dateReceived = schemas.StrSchema
                                
                                
                                class user(
                                    schemas.DictBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneFrozenDictMixin
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "data",
                                            "name",
                                            "id",
                                            "ip_address",
                                            "email",
                                            "username",
                                        }
                                        
                                        class properties:
                                            
                                            
                                            class username(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'username':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class name(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'name':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class ip_address(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'ip_address':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class email(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'email':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class data(
                                                schemas.DictBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneFrozenDictMixin
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        isStaff = schemas.BoolSchema
                                                        __annotations__ = {
                                                            "isStaff": isStaff,
                                                        }
                                            
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["isStaff"]) -> MetaOapg.properties.isStaff: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["isStaff", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["isStaff"]) -> typing.Union[MetaOapg.properties.isStaff, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isStaff", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                                    isStaff: typing.Union[MetaOapg.properties.isStaff, bool, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'data':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        isStaff=isStaff,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            id = schemas.StrSchema
                                            __annotations__ = {
                                                "username": username,
                                                "name": name,
                                                "ip_address": ip_address,
                                                "email": email,
                                                "data": data,
                                                "id": id,
                                            }
                                
                                    
                                    data: MetaOapg.properties.data
                                    name: MetaOapg.properties.name
                                    id: MetaOapg.properties.id
                                    ip_address: MetaOapg.properties.ip_address
                                    email: MetaOapg.properties.email
                                    username: MetaOapg.properties.username
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["username", "name", "ip_address", "email", "data", "id", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["username", "name", "ip_address", "email", "data", "id", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'user':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class entries(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.ComposedSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                
                                                class any_of_0(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        required = {
                                                            "data",
                                                            "type",
                                                        }
                                                        
                                                        class properties:
                                                            type = schemas.StrSchema
                                                            
                                                            
                                                            class data(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    required = {
                                                                        "values",
                                                                    }
                                                                    
                                                                    class properties:
                                                                        
                                                                        
                                                                        class values(
                                                                            schemas.ListSchema
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                
                                                                                
                                                                                class items(
                                                                                    schemas.DictSchema
                                                                                ):
                                                                                
                                                                                
                                                                                    class MetaOapg:
                                                                                        required = {
                                                                                            "event_id",
                                                                                            "data",
                                                                                            "level",
                                                                                            "category",
                                                                                            "message",
                                                                                            "type",
                                                                                            "timestamp",
                                                                                        }
                                                                                        
                                                                                        class properties:
                                                                                            category = schemas.StrSchema
                                                                                            level = schemas.StrSchema
                                                                                            
                                                                                            
                                                                                            class event_id(
                                                                                                schemas.StrBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneStrMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                ) -> 'event_id':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *_args,
                                                                                                        _configuration=_configuration,
                                                                                                    )
                                                                                            timestamp = schemas.DateTimeSchema
                                                                                            
                                                                                            
                                                                                            class data(
                                                                                                schemas.DictBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneFrozenDictMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                                ) -> 'data':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *_args,
                                                                                                        _configuration=_configuration,
                                                                                                        **kwargs,
                                                                                                    )
                                                                                            
                                                                                            
                                                                                            class message(
                                                                                                schemas.StrBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneStrMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                ) -> 'message':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *_args,
                                                                                                        _configuration=_configuration,
                                                                                                    )
                                                                                            type = schemas.StrSchema
                                                                                            __annotations__ = {
                                                                                                "category": category,
                                                                                                "level": level,
                                                                                                "event_id": event_id,
                                                                                                "timestamp": timestamp,
                                                                                                "data": data,
                                                                                                "message": message,
                                                                                                "type": type,
                                                                                            }
                                                                                    
                                                                                    event_id: MetaOapg.properties.event_id
                                                                                    data: MetaOapg.properties.data
                                                                                    level: MetaOapg.properties.level
                                                                                    category: MetaOapg.properties.category
                                                                                    message: MetaOapg.properties.message
                                                                                    type: MetaOapg.properties.type
                                                                                    timestamp: MetaOapg.properties.timestamp
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                    
                                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["category", "level", "event_id", "timestamp", "data", "message", "type", ], str]):
                                                                                        # dict_instance[name] accessor
                                                                                        return super().__getitem__(name)
                                                                                    
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                    
                                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["category", "level", "event_id", "timestamp", "data", "message", "type", ], str]):
                                                                                        return super().get_item_oapg(name)
                                                                                    
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                                        event_id: typing.Union[MetaOapg.properties.event_id, None, str, ],
                                                                                        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, None, ],
                                                                                        level: typing.Union[MetaOapg.properties.level, str, ],
                                                                                        category: typing.Union[MetaOapg.properties.category, str, ],
                                                                                        message: typing.Union[MetaOapg.properties.message, None, str, ],
                                                                                        type: typing.Union[MetaOapg.properties.type, str, ],
                                                                                        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                    ) -> 'items':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            *_args,
                                                                                            event_id=event_id,
                                                                                            data=data,
                                                                                            level=level,
                                                                                            category=category,
                                                                                            message=message,
                                                                                            type=type,
                                                                                            timestamp=timestamp,
                                                                                            _configuration=_configuration,
                                                                                            **kwargs,
                                                                                        )
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'values':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    _arg,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                return super().__getitem__(i)
                                                                        __annotations__ = {
                                                                            "values": values,
                                                                        }
                                                                
                                                                values: MetaOapg.properties.values
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["values", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["values", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                    values: typing.Union[MetaOapg.properties.values, list, tuple, ],
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'data':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *_args,
                                                                        values=values,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            __annotations__ = {
                                                                "type": type,
                                                                "data": data,
                                                            }
                                                    
                                                    data: MetaOapg.properties.data
                                                    type: MetaOapg.properties.type
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "data", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "data", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, ],
                                                        type: typing.Union[MetaOapg.properties.type, str, ],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'any_of_0':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            data=data,
                                                            type=type,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                
                                                
                                                class any_of_1(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        required = {
                                                            "data",
                                                            "type",
                                                        }
                                                        
                                                        class properties:
                                                            type = schemas.StrSchema
                                                            
                                                            
                                                            class data(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    required = {
                                                                        "headers",
                                                                        "fragment",
                                                                        "inferredContentType",
                                                                        "data",
                                                                        "method",
                                                                        "query",
                                                                        "env",
                                                                        "cookies",
                                                                        "url",
                                                                    }
                                                                    
                                                                    class properties:
                                                                        
                                                                        
                                                                        class fragment(
                                                                            schemas.StrBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneStrMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *_args: typing.Union[None, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'fragment':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *_args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                        
                                                                        class cookies(
                                                                            schemas.ListBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneTupleMixin
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                
                                                                                
                                                                                class items(
                                                                                    schemas.ListSchema
                                                                                ):
                                                                                
                                                                                
                                                                                    class MetaOapg:
                                                                                        items = schemas.StrSchema
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    ) -> 'items':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            _arg,
                                                                                            _configuration=_configuration,
                                                                                        )
                                                                                
                                                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                        return super().__getitem__(i)
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *_args: typing.Union[list, tuple, None, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'cookies':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *_args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                        
                                                                        class inferredContentType(
                                                                            schemas.StrBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneStrMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *_args: typing.Union[None, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'inferredContentType':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *_args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                        
                                                                        class env(
                                                                            schemas.DictBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneFrozenDictMixin
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                
                                                                                class properties:
                                                                                    ENV = schemas.StrSchema
                                                                                    __annotations__ = {
                                                                                        "ENV": ENV,
                                                                                    }
                                                                        
                                                                            
                                                                            @typing.overload
                                                                            def __getitem__(self, name: typing_extensions.Literal["ENV"]) -> MetaOapg.properties.ENV: ...
                                                                            
                                                                            @typing.overload
                                                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                            
                                                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["ENV", ], str]):
                                                                                # dict_instance[name] accessor
                                                                                return super().__getitem__(name)
                                                                            
                                                                            
                                                                            @typing.overload
                                                                            def get_item_oapg(self, name: typing_extensions.Literal["ENV"]) -> typing.Union[MetaOapg.properties.ENV, schemas.Unset]: ...
                                                                            
                                                                            @typing.overload
                                                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                            
                                                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ENV", ], str]):
                                                                                return super().get_item_oapg(name)
                                                                            
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                                                                ENV: typing.Union[MetaOapg.properties.ENV, str, schemas.Unset] = schemas.unset,
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                            ) -> 'env':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *_args,
                                                                                    ENV=ENV,
                                                                                    _configuration=_configuration,
                                                                                    **kwargs,
                                                                                )
                                                                        
                                                                        
                                                                        class headers(
                                                                            schemas.ListSchema
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                
                                                                                
                                                                                class items(
                                                                                    schemas.ListSchema
                                                                                ):
                                                                                
                                                                                
                                                                                    class MetaOapg:
                                                                                        items = schemas.StrSchema
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    ) -> 'items':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            _arg,
                                                                                            _configuration=_configuration,
                                                                                        )
                                                                                
                                                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                        return super().__getitem__(i)
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'headers':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    _arg,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                return super().__getitem__(i)
                                                                        url = schemas.StrSchema
                                                                        
                                                                        
                                                                        class query(
                                                                            schemas.ListSchema
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                
                                                                                
                                                                                class items(
                                                                                    schemas.ListSchema
                                                                                ):
                                                                                
                                                                                
                                                                                    class MetaOapg:
                                                                                        items = schemas.StrSchema
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    ) -> 'items':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            _arg,
                                                                                            _configuration=_configuration,
                                                                                        )
                                                                                
                                                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                        return super().__getitem__(i)
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'query':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    _arg,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                return super().__getitem__(i)
                                                                        
                                                                        
                                                                        class data(
                                                                            schemas.DictBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneFrozenDictMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                            ) -> 'data':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *_args,
                                                                                    _configuration=_configuration,
                                                                                    **kwargs,
                                                                                )
                                                                        
                                                                        
                                                                        class method(
                                                                            schemas.StrBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneStrMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *_args: typing.Union[None, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'method':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *_args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        __annotations__ = {
                                                                            "fragment": fragment,
                                                                            "cookies": cookies,
                                                                            "inferredContentType": inferredContentType,
                                                                            "env": env,
                                                                            "headers": headers,
                                                                            "url": url,
                                                                            "query": query,
                                                                            "data": data,
                                                                            "method": method,
                                                                        }
                                                                
                                                                headers: MetaOapg.properties.headers
                                                                fragment: MetaOapg.properties.fragment
                                                                inferredContentType: MetaOapg.properties.inferredContentType
                                                                data: MetaOapg.properties.data
                                                                method: MetaOapg.properties.method
                                                                query: MetaOapg.properties.query
                                                                env: MetaOapg.properties.env
                                                                cookies: MetaOapg.properties.cookies
                                                                url: MetaOapg.properties.url
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["fragment"]) -> MetaOapg.properties.fragment: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["cookies"]) -> MetaOapg.properties.cookies: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["inferredContentType"]) -> MetaOapg.properties.inferredContentType: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["env"]) -> MetaOapg.properties.env: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["headers"]) -> MetaOapg.properties.headers: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["query"]) -> MetaOapg.properties.query: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["fragment", "cookies", "inferredContentType", "env", "headers", "url", "query", "data", "method", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["fragment"]) -> MetaOapg.properties.fragment: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["cookies"]) -> MetaOapg.properties.cookies: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["inferredContentType"]) -> MetaOapg.properties.inferredContentType: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["env"]) -> MetaOapg.properties.env: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["headers"]) -> MetaOapg.properties.headers: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["query"]) -> MetaOapg.properties.query: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fragment", "cookies", "inferredContentType", "env", "headers", "url", "query", "data", "method", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                    headers: typing.Union[MetaOapg.properties.headers, list, tuple, ],
                                                                    fragment: typing.Union[MetaOapg.properties.fragment, None, str, ],
                                                                    inferredContentType: typing.Union[MetaOapg.properties.inferredContentType, None, str, ],
                                                                    data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, None, ],
                                                                    method: typing.Union[MetaOapg.properties.method, None, str, ],
                                                                    query: typing.Union[MetaOapg.properties.query, list, tuple, ],
                                                                    env: typing.Union[MetaOapg.properties.env, dict, frozendict.frozendict, None, ],
                                                                    cookies: typing.Union[MetaOapg.properties.cookies, list, tuple, None, ],
                                                                    url: typing.Union[MetaOapg.properties.url, str, ],
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'data':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *_args,
                                                                        headers=headers,
                                                                        fragment=fragment,
                                                                        inferredContentType=inferredContentType,
                                                                        data=data,
                                                                        method=method,
                                                                        query=query,
                                                                        env=env,
                                                                        cookies=cookies,
                                                                        url=url,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            __annotations__ = {
                                                                "type": type,
                                                                "data": data,
                                                            }
                                                    
                                                    data: MetaOapg.properties.data
                                                    type: MetaOapg.properties.type
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "data", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "data", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, ],
                                                        type: typing.Union[MetaOapg.properties.type, str, ],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'any_of_1':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            data=data,
                                                            type=type,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                
                                                
                                                class any_of_2(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        required = {
                                                            "data",
                                                            "type",
                                                        }
                                                        
                                                        class properties:
                                                            type = schemas.StrSchema
                                                            
                                                            
                                                            class data(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    required = {
                                                                        "formatted",
                                                                    }
                                                                    
                                                                    class properties:
                                                                        formatted = schemas.StrSchema
                                                                        __annotations__ = {
                                                                            "formatted": formatted,
                                                                        }
                                                                
                                                                formatted: MetaOapg.properties.formatted
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["formatted"]) -> MetaOapg.properties.formatted: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["formatted", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["formatted"]) -> MetaOapg.properties.formatted: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["formatted", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                    formatted: typing.Union[MetaOapg.properties.formatted, str, ],
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'data':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *_args,
                                                                        formatted=formatted,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            __annotations__ = {
                                                                "type": type,
                                                                "data": data,
                                                            }
                                                    
                                                    data: MetaOapg.properties.data
                                                    type: MetaOapg.properties.type
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "data", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "data", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, ],
                                                        type: typing.Union[MetaOapg.properties.type, str, ],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'any_of_2':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            data=data,
                                                            type=type,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                
                                                
                                                class any_of_3(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        required = {
                                                            "data",
                                                            "type",
                                                        }
                                                        
                                                        class properties:
                                                            type = schemas.StrSchema
                                                            
                                                            
                                                            class data(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    required = {
                                                                        "hasSystemFrames",
                                                                        "excOmitted",
                                                                        "values",
                                                                    }
                                                                    
                                                                    class properties:
                                                                        
                                                                        
                                                                        class excOmitted(
                                                                            schemas.ListBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneTupleMixin
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                items = schemas.IntSchema
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *_args: typing.Union[list, tuple, None, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'excOmitted':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *_args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        hasSystemFrames = schemas.BoolSchema
                                                                        
                                                                        
                                                                        class values(
                                                                            schemas.ListSchema
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                
                                                                                
                                                                                class items(
                                                                                    schemas.DictSchema
                                                                                ):
                                                                                
                                                                                
                                                                                    class MetaOapg:
                                                                                        required = {
                                                                                            "threadId",
                                                                                            "stacktrace",
                                                                                            "rawStacktrace",
                                                                                            "module",
                                                                                            "mechanism",
                                                                                            "type",
                                                                                            "value",
                                                                                        }
                                                                                        
                                                                                        class properties:
                                                                                            
                                                                                            
                                                                                            class stacktrace(
                                                                                                schemas.DictBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneFrozenDictMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                class MetaOapg:
                                                                                                    required = {
                                                                                                        "hasSystemFrames",
                                                                                                        "frames",
                                                                                                        "registers",
                                                                                                        "framesOmitted",
                                                                                                    }
                                                                                                    
                                                                                                    class properties:
                                                                                                        
                                                                                                        
                                                                                                        class frames(
                                                                                                            schemas.ListSchema
                                                                                                        ):
                                                                                                        
                                                                                                        
                                                                                                            class MetaOapg:
                                                                                                                
                                                                                                                
                                                                                                                class items(
                                                                                                                    schemas.DictSchema
                                                                                                                ):
                                                                                                                
                                                                                                                
                                                                                                                    class MetaOapg:
                                                                                                                        required = {
                                                                                                                            "trust",
                                                                                                                            "symbol",
                                                                                                                            "package",
                                                                                                                            "absPath",
                                                                                                                            "colNo",
                                                                                                                            "inApp",
                                                                                                                            "module",
                                                                                                                            "instructionAddr",
                                                                                                                            "platform",
                                                                                                                            "filename",
                                                                                                                            "lineNo",
                                                                                                                            "function",
                                                                                                                            "context",
                                                                                                                            "symbolAddr",
                                                                                                                            "vars",
                                                                                                                            "errors",
                                                                                                                        }
                                                                                                                        
                                                                                                                        class properties:
                                                                                                                            function = schemas.StrSchema
                                                                                                                            
                                                                                                                            
                                                                                                                            class errors(
                                                                                                                                schemas.StrBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneStrMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'errors':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            
                                                                                                                            
                                                                                                                            class colNo(
                                                                                                                                schemas.IntBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneDecimalMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, decimal.Decimal, int, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'colNo':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            
                                                                                                                            
                                                                                                                            class vars(
                                                                                                                                schemas.DictBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneFrozenDictMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                                                                ) -> 'vars':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                        **kwargs,
                                                                                                                                    )
                                                                                                                            
                                                                                                                            
                                                                                                                            class package(
                                                                                                                                schemas.StrBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneStrMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'package':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            
                                                                                                                            
                                                                                                                            class absPath(
                                                                                                                                schemas.StrBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneStrMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'absPath':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            inApp = schemas.BoolSchema
                                                                                                                            lineNo = schemas.IntSchema
                                                                                                                            module = schemas.StrSchema
                                                                                                                            filename = schemas.StrSchema
                                                                                                                            
                                                                                                                            
                                                                                                                            class platform(
                                                                                                                                schemas.StrBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneStrMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'platform':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            
                                                                                                                            
                                                                                                                            class instructionAddr(
                                                                                                                                schemas.StrBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneStrMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'instructionAddr':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            
                                                                                                                            
                                                                                                                            class context(
                                                                                                                                schemas.ListSchema
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                class MetaOapg:
                                                                                                                                    
                                                                                                                                    
                                                                                                                                    class items(
                                                                                                                                        schemas.ListSchema
                                                                                                                                    ):
                                                                                                                                    
                                                                                                                                    
                                                                                                                                        class MetaOapg:
                                                                                                                                            
                                                                                                                                            
                                                                                                                                            class items(
                                                                                                                                                schemas.ComposedSchema,
                                                                                                                                            ):
                                                                                                                                            
                                                                                                                                            
                                                                                                                                                class MetaOapg:
                                                                                                                                                    one_of_0 = schemas.IntSchema
                                                                                                                                                    one_of_1 = schemas.StrSchema
                                                                                                                                                    
                                                                                                                                                    @classmethod
                                                                                                                                                    @functools.lru_cache()
                                                                                                                                                    def one_of(cls):
                                                                                                                                                        # we need this here to make our import statements work
                                                                                                                                                        # we must store _composed_schemas in here so the code is only run
                                                                                                                                                        # when we invoke this method. If we kept this at the class
                                                                                                                                                        # level we would get an error because the class level
                                                                                                                                                        # code would be run when this module is imported, and these composed
                                                                                                                                                        # classes don't exist yet because their module has not finished
                                                                                                                                                        # loading
                                                                                                                                                        return [
                                                                                                                                                            cls.one_of_0,
                                                                                                                                                            cls.one_of_1,
                                                                                                                                                        ]
                                                                                                                                            
                                                                                                                                            
                                                                                                                                                def __new__(
                                                                                                                                                    cls,
                                                                                                                                                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                                                                                ) -> 'items':
                                                                                                                                                    return super().__new__(
                                                                                                                                                        cls,
                                                                                                                                                        *_args,
                                                                                                                                                        _configuration=_configuration,
                                                                                                                                                        **kwargs,
                                                                                                                                                    )
                                                                                                                                    
                                                                                                                                        def __new__(
                                                                                                                                            cls,
                                                                                                                                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                                                                                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                        ) -> 'items':
                                                                                                                                            return super().__new__(
                                                                                                                                                cls,
                                                                                                                                                _arg,
                                                                                                                                                _configuration=_configuration,
                                                                                                                                            )
                                                                                                                                    
                                                                                                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                                                                            return super().__getitem__(i)
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'context':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        _arg,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            
                                                                                                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                                                                    return super().__getitem__(i)
                                                                                                                            
                                                                                                                            
                                                                                                                            class symbolAddr(
                                                                                                                                schemas.StrBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneStrMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'symbolAddr':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            
                                                                                                                            
                                                                                                                            class trust(
                                                                                                                                schemas.StrBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneStrMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'trust':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            
                                                                                                                            
                                                                                                                            class symbol(
                                                                                                                                schemas.StrBase,
                                                                                                                                schemas.NoneBase,
                                                                                                                                schemas.Schema,
                                                                                                                                schemas.NoneStrMixin
                                                                                                                            ):
                                                                                                                            
                                                                                                                            
                                                                                                                                def __new__(
                                                                                                                                    cls,
                                                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                                ) -> 'symbol':
                                                                                                                                    return super().__new__(
                                                                                                                                        cls,
                                                                                                                                        *_args,
                                                                                                                                        _configuration=_configuration,
                                                                                                                                    )
                                                                                                                            __annotations__ = {
                                                                                                                                "function": function,
                                                                                                                                "errors": errors,
                                                                                                                                "colNo": colNo,
                                                                                                                                "vars": vars,
                                                                                                                                "package": package,
                                                                                                                                "absPath": absPath,
                                                                                                                                "inApp": inApp,
                                                                                                                                "lineNo": lineNo,
                                                                                                                                "module": module,
                                                                                                                                "filename": filename,
                                                                                                                                "platform": platform,
                                                                                                                                "instructionAddr": instructionAddr,
                                                                                                                                "context": context,
                                                                                                                                "symbolAddr": symbolAddr,
                                                                                                                                "trust": trust,
                                                                                                                                "symbol": symbol,
                                                                                                                            }
                                                                                                                    
                                                                                                                    trust: MetaOapg.properties.trust
                                                                                                                    symbol: MetaOapg.properties.symbol
                                                                                                                    package: MetaOapg.properties.package
                                                                                                                    absPath: MetaOapg.properties.absPath
                                                                                                                    colNo: MetaOapg.properties.colNo
                                                                                                                    inApp: MetaOapg.properties.inApp
                                                                                                                    module: MetaOapg.properties.module
                                                                                                                    instructionAddr: MetaOapg.properties.instructionAddr
                                                                                                                    platform: MetaOapg.properties.platform
                                                                                                                    filename: MetaOapg.properties.filename
                                                                                                                    lineNo: MetaOapg.properties.lineNo
                                                                                                                    function: MetaOapg.properties.function
                                                                                                                    context: MetaOapg.properties.context
                                                                                                                    symbolAddr: MetaOapg.properties.symbolAddr
                                                                                                                    vars: MetaOapg.properties.vars
                                                                                                                    errors: MetaOapg.properties.errors
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["function"]) -> MetaOapg.properties.function: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["colNo"]) -> MetaOapg.properties.colNo: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["vars"]) -> MetaOapg.properties.vars: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["package"]) -> MetaOapg.properties.package: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["absPath"]) -> MetaOapg.properties.absPath: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["inApp"]) -> MetaOapg.properties.inApp: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["lineNo"]) -> MetaOapg.properties.lineNo: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["module"]) -> MetaOapg.properties.module: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["instructionAddr"]) -> MetaOapg.properties.instructionAddr: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["context"]) -> MetaOapg.properties.context: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["symbolAddr"]) -> MetaOapg.properties.symbolAddr: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["trust"]) -> MetaOapg.properties.trust: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                                                    
                                                                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["function", "errors", "colNo", "vars", "package", "absPath", "inApp", "lineNo", "module", "filename", "platform", "instructionAddr", "context", "symbolAddr", "trust", "symbol", ], str]):
                                                                                                                        # dict_instance[name] accessor
                                                                                                                        return super().__getitem__(name)
                                                                                                                    
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["function"]) -> MetaOapg.properties.function: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["colNo"]) -> MetaOapg.properties.colNo: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["vars"]) -> MetaOapg.properties.vars: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["package"]) -> MetaOapg.properties.package: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["absPath"]) -> MetaOapg.properties.absPath: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["inApp"]) -> MetaOapg.properties.inApp: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["lineNo"]) -> MetaOapg.properties.lineNo: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["module"]) -> MetaOapg.properties.module: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["instructionAddr"]) -> MetaOapg.properties.instructionAddr: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> MetaOapg.properties.context: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["symbolAddr"]) -> MetaOapg.properties.symbolAddr: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["trust"]) -> MetaOapg.properties.trust: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
                                                                                                                    
                                                                                                                    @typing.overload
                                                                                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                                                    
                                                                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["function", "errors", "colNo", "vars", "package", "absPath", "inApp", "lineNo", "module", "filename", "platform", "instructionAddr", "context", "symbolAddr", "trust", "symbol", ], str]):
                                                                                                                        return super().get_item_oapg(name)
                                                                                                                    
                                                                                                                
                                                                                                                    def __new__(
                                                                                                                        cls,
                                                                                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                                                                        trust: typing.Union[MetaOapg.properties.trust, None, str, ],
                                                                                                                        symbol: typing.Union[MetaOapg.properties.symbol, None, str, ],
                                                                                                                        package: typing.Union[MetaOapg.properties.package, None, str, ],
                                                                                                                        absPath: typing.Union[MetaOapg.properties.absPath, None, str, ],
                                                                                                                        colNo: typing.Union[MetaOapg.properties.colNo, None, decimal.Decimal, int, ],
                                                                                                                        inApp: typing.Union[MetaOapg.properties.inApp, bool, ],
                                                                                                                        module: typing.Union[MetaOapg.properties.module, str, ],
                                                                                                                        instructionAddr: typing.Union[MetaOapg.properties.instructionAddr, None, str, ],
                                                                                                                        platform: typing.Union[MetaOapg.properties.platform, None, str, ],
                                                                                                                        filename: typing.Union[MetaOapg.properties.filename, str, ],
                                                                                                                        lineNo: typing.Union[MetaOapg.properties.lineNo, decimal.Decimal, int, ],
                                                                                                                        function: typing.Union[MetaOapg.properties.function, str, ],
                                                                                                                        context: typing.Union[MetaOapg.properties.context, list, tuple, ],
                                                                                                                        symbolAddr: typing.Union[MetaOapg.properties.symbolAddr, None, str, ],
                                                                                                                        vars: typing.Union[MetaOapg.properties.vars, dict, frozendict.frozendict, None, ],
                                                                                                                        errors: typing.Union[MetaOapg.properties.errors, None, str, ],
                                                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                                                    ) -> 'items':
                                                                                                                        return super().__new__(
                                                                                                                            cls,
                                                                                                                            *_args,
                                                                                                                            trust=trust,
                                                                                                                            symbol=symbol,
                                                                                                                            package=package,
                                                                                                                            absPath=absPath,
                                                                                                                            colNo=colNo,
                                                                                                                            inApp=inApp,
                                                                                                                            module=module,
                                                                                                                            instructionAddr=instructionAddr,
                                                                                                                            platform=platform,
                                                                                                                            filename=filename,
                                                                                                                            lineNo=lineNo,
                                                                                                                            function=function,
                                                                                                                            context=context,
                                                                                                                            symbolAddr=symbolAddr,
                                                                                                                            vars=vars,
                                                                                                                            errors=errors,
                                                                                                                            _configuration=_configuration,
                                                                                                                            **kwargs,
                                                                                                                        )
                                                                                                        
                                                                                                            def __new__(
                                                                                                                cls,
                                                                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                            ) -> 'frames':
                                                                                                                return super().__new__(
                                                                                                                    cls,
                                                                                                                    _arg,
                                                                                                                    _configuration=_configuration,
                                                                                                                )
                                                                                                        
                                                                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                                                return super().__getitem__(i)
                                                                                                        
                                                                                                        
                                                                                                        class framesOmitted(
                                                                                                            schemas.StrBase,
                                                                                                            schemas.NoneBase,
                                                                                                            schemas.Schema,
                                                                                                            schemas.NoneStrMixin
                                                                                                        ):
                                                                                                        
                                                                                                        
                                                                                                            def __new__(
                                                                                                                cls,
                                                                                                                *_args: typing.Union[None, str, ],
                                                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                            ) -> 'framesOmitted':
                                                                                                                return super().__new__(
                                                                                                                    cls,
                                                                                                                    *_args,
                                                                                                                    _configuration=_configuration,
                                                                                                                )
                                                                                                        
                                                                                                        
                                                                                                        class registers(
                                                                                                            schemas.StrBase,
                                                                                                            schemas.NoneBase,
                                                                                                            schemas.Schema,
                                                                                                            schemas.NoneStrMixin
                                                                                                        ):
                                                                                                        
                                                                                                        
                                                                                                            def __new__(
                                                                                                                cls,
                                                                                                                *_args: typing.Union[None, str, ],
                                                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                            ) -> 'registers':
                                                                                                                return super().__new__(
                                                                                                                    cls,
                                                                                                                    *_args,
                                                                                                                    _configuration=_configuration,
                                                                                                                )
                                                                                                        hasSystemFrames = schemas.BoolSchema
                                                                                                        __annotations__ = {
                                                                                                            "frames": frames,
                                                                                                            "framesOmitted": framesOmitted,
                                                                                                            "registers": registers,
                                                                                                            "hasSystemFrames": hasSystemFrames,
                                                                                                        }
                                                                                            
                                                                                                
                                                                                                hasSystemFrames: MetaOapg.properties.hasSystemFrames
                                                                                                frames: MetaOapg.properties.frames
                                                                                                registers: MetaOapg.properties.registers
                                                                                                framesOmitted: MetaOapg.properties.framesOmitted
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["frames"]) -> MetaOapg.properties.frames: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["framesOmitted"]) -> MetaOapg.properties.framesOmitted: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["registers"]) -> MetaOapg.properties.registers: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["hasSystemFrames"]) -> MetaOapg.properties.hasSystemFrames: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                                
                                                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["frames", "framesOmitted", "registers", "hasSystemFrames", ], str]):
                                                                                                    # dict_instance[name] accessor
                                                                                                    return super().__getitem__(name)
                                                                                                
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["frames"]) -> MetaOapg.properties.frames: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["framesOmitted"]) -> MetaOapg.properties.framesOmitted: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["registers"]) -> MetaOapg.properties.registers: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["hasSystemFrames"]) -> MetaOapg.properties.hasSystemFrames: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                                
                                                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["frames", "framesOmitted", "registers", "hasSystemFrames", ], str]):
                                                                                                    return super().get_item_oapg(name)
                                                                                                
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                                ) -> 'stacktrace':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *_args,
                                                                                                        _configuration=_configuration,
                                                                                                        **kwargs,
                                                                                                    )
                                                                                            
                                                                                            
                                                                                            class module(
                                                                                                schemas.StrBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneStrMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                ) -> 'module':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *_args,
                                                                                                        _configuration=_configuration,
                                                                                                    )
                                                                                            
                                                                                            
                                                                                            class rawStacktrace(
                                                                                                schemas.DictBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneFrozenDictMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                                ) -> 'rawStacktrace':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *_args,
                                                                                                        _configuration=_configuration,
                                                                                                        **kwargs,
                                                                                                    )
                                                                                            
                                                                                            
                                                                                            class mechanism(
                                                                                                schemas.DictBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneFrozenDictMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                class MetaOapg:
                                                                                                    
                                                                                                    class properties:
                                                                                                        type = schemas.StrSchema
                                                                                                        handled = schemas.BoolSchema
                                                                                                        __annotations__ = {
                                                                                                            "type": type,
                                                                                                            "handled": handled,
                                                                                                        }
                                                                                            
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["handled"]) -> MetaOapg.properties.handled: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                                
                                                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "handled", ], str]):
                                                                                                    # dict_instance[name] accessor
                                                                                                    return super().__getitem__(name)
                                                                                                
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["handled"]) -> typing.Union[MetaOapg.properties.handled, schemas.Unset]: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                                
                                                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "handled", ], str]):
                                                                                                    return super().get_item_oapg(name)
                                                                                                
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                                                                                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                                                                    handled: typing.Union[MetaOapg.properties.handled, bool, schemas.Unset] = schemas.unset,
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                                ) -> 'mechanism':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *_args,
                                                                                                        type=type,
                                                                                                        handled=handled,
                                                                                                        _configuration=_configuration,
                                                                                                        **kwargs,
                                                                                                    )
                                                                                            
                                                                                            
                                                                                            class threadId(
                                                                                                schemas.StrBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneStrMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *_args: typing.Union[None, str, ],
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                ) -> 'threadId':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *_args,
                                                                                                        _configuration=_configuration,
                                                                                                    )
                                                                                            value = schemas.StrSchema
                                                                                            type = schemas.StrSchema
                                                                                            __annotations__ = {
                                                                                                "stacktrace": stacktrace,
                                                                                                "module": module,
                                                                                                "rawStacktrace": rawStacktrace,
                                                                                                "mechanism": mechanism,
                                                                                                "threadId": threadId,
                                                                                                "value": value,
                                                                                                "type": type,
                                                                                            }
                                                                                    
                                                                                    threadId: MetaOapg.properties.threadId
                                                                                    stacktrace: MetaOapg.properties.stacktrace
                                                                                    rawStacktrace: MetaOapg.properties.rawStacktrace
                                                                                    module: MetaOapg.properties.module
                                                                                    mechanism: MetaOapg.properties.mechanism
                                                                                    type: MetaOapg.properties.type
                                                                                    value: MetaOapg.properties.value
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["stacktrace"]) -> MetaOapg.properties.stacktrace: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["module"]) -> MetaOapg.properties.module: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["rawStacktrace"]) -> MetaOapg.properties.rawStacktrace: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["mechanism"]) -> MetaOapg.properties.mechanism: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["threadId"]) -> MetaOapg.properties.threadId: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                    
                                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stacktrace", "module", "rawStacktrace", "mechanism", "threadId", "value", "type", ], str]):
                                                                                        # dict_instance[name] accessor
                                                                                        return super().__getitem__(name)
                                                                                    
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["stacktrace"]) -> MetaOapg.properties.stacktrace: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["module"]) -> MetaOapg.properties.module: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["rawStacktrace"]) -> MetaOapg.properties.rawStacktrace: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["mechanism"]) -> MetaOapg.properties.mechanism: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["threadId"]) -> MetaOapg.properties.threadId: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                    
                                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stacktrace", "module", "rawStacktrace", "mechanism", "threadId", "value", "type", ], str]):
                                                                                        return super().get_item_oapg(name)
                                                                                    
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                                        threadId: typing.Union[MetaOapg.properties.threadId, None, str, ],
                                                                                        stacktrace: typing.Union[MetaOapg.properties.stacktrace, dict, frozendict.frozendict, None, ],
                                                                                        rawStacktrace: typing.Union[MetaOapg.properties.rawStacktrace, dict, frozendict.frozendict, None, ],
                                                                                        module: typing.Union[MetaOapg.properties.module, None, str, ],
                                                                                        mechanism: typing.Union[MetaOapg.properties.mechanism, dict, frozendict.frozendict, None, ],
                                                                                        type: typing.Union[MetaOapg.properties.type, str, ],
                                                                                        value: typing.Union[MetaOapg.properties.value, str, ],
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                    ) -> 'items':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            *_args,
                                                                                            threadId=threadId,
                                                                                            stacktrace=stacktrace,
                                                                                            rawStacktrace=rawStacktrace,
                                                                                            module=module,
                                                                                            mechanism=mechanism,
                                                                                            type=type,
                                                                                            value=value,
                                                                                            _configuration=_configuration,
                                                                                            **kwargs,
                                                                                        )
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'values':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    _arg,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                return super().__getitem__(i)
                                                                        __annotations__ = {
                                                                            "excOmitted": excOmitted,
                                                                            "hasSystemFrames": hasSystemFrames,
                                                                            "values": values,
                                                                        }
                                                                
                                                                hasSystemFrames: MetaOapg.properties.hasSystemFrames
                                                                excOmitted: MetaOapg.properties.excOmitted
                                                                values: MetaOapg.properties.values
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["excOmitted"]) -> MetaOapg.properties.excOmitted: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["hasSystemFrames"]) -> MetaOapg.properties.hasSystemFrames: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["excOmitted", "hasSystemFrames", "values", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["excOmitted"]) -> MetaOapg.properties.excOmitted: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["hasSystemFrames"]) -> MetaOapg.properties.hasSystemFrames: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["excOmitted", "hasSystemFrames", "values", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                                    hasSystemFrames: typing.Union[MetaOapg.properties.hasSystemFrames, bool, ],
                                                                    excOmitted: typing.Union[MetaOapg.properties.excOmitted, list, tuple, None, ],
                                                                    values: typing.Union[MetaOapg.properties.values, list, tuple, ],
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'data':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *_args,
                                                                        hasSystemFrames=hasSystemFrames,
                                                                        excOmitted=excOmitted,
                                                                        values=values,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                            __annotations__ = {
                                                                "type": type,
                                                                "data": data,
                                                            }
                                                    
                                                    data: MetaOapg.properties.data
                                                    type: MetaOapg.properties.type
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "data", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "data", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, ],
                                                        type: typing.Union[MetaOapg.properties.type, str, ],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'any_of_3':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            data=data,
                                                            type=type,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                
                                                @classmethod
                                                @functools.lru_cache()
                                                def any_of(cls):
                                                    # we need this here to make our import statements work
                                                    # we must store _composed_schemas in here so the code is only run
                                                    # when we invoke this method. If we kept this at the class
                                                    # level we would get an error because the class level
                                                    # code would be run when this module is imported, and these composed
                                                    # classes don't exist yet because their module has not finished
                                                    # loading
                                                    return [
                                                        cls.any_of_0,
                                                        cls.any_of_1,
                                                        cls.any_of_2,
                                                        cls.any_of_3,
                                                    ]
                                        
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'entries':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                packages = schemas.DictSchema
                                
                                
                                class sdk(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            version = schemas.StrSchema
                                            name = schemas.StrSchema
                                            __annotations__ = {
                                                "version": version,
                                                "name": name,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "name", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "name", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'sdk':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            version=version,
                                            name=name,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class _meta(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class user(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'user':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class context(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'context':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            entries = schemas.DictSchema
                                            
                                            
                                            class contexts(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'contexts':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class message(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'message':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class packages(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'packages':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            tags = schemas.DictSchema
                                            
                                            
                                            class sdk(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'sdk':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                            __annotations__ = {
                                                "user": user,
                                                "context": context,
                                                "entries": entries,
                                                "contexts": contexts,
                                                "message": message,
                                                "packages": packages,
                                                "tags": tags,
                                                "sdk": sdk,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["context"]) -> MetaOapg.properties.context: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["contexts"]) -> MetaOapg.properties.contexts: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["packages"]) -> MetaOapg.properties.packages: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["sdk"]) -> MetaOapg.properties.sdk: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user", "context", "entries", "contexts", "message", "packages", "tags", "sdk", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union[MetaOapg.properties.context, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> typing.Union[MetaOapg.properties.entries, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["contexts"]) -> typing.Union[MetaOapg.properties.contexts, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["packages"]) -> typing.Union[MetaOapg.properties.packages, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["sdk"]) -> typing.Union[MetaOapg.properties.sdk, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user", "context", "entries", "contexts", "message", "packages", "tags", "sdk", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        user: typing.Union[MetaOapg.properties.user, None, str, schemas.Unset] = schemas.unset,
                                        context: typing.Union[MetaOapg.properties.context, None, str, schemas.Unset] = schemas.unset,
                                        entries: typing.Union[MetaOapg.properties.entries, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        contexts: typing.Union[MetaOapg.properties.contexts, None, str, schemas.Unset] = schemas.unset,
                                        message: typing.Union[MetaOapg.properties.message, None, str, schemas.Unset] = schemas.unset,
                                        packages: typing.Union[MetaOapg.properties.packages, None, str, schemas.Unset] = schemas.unset,
                                        tags: typing.Union[MetaOapg.properties.tags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        sdk: typing.Union[MetaOapg.properties.sdk, None, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> '_meta':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            user=user,
                                            context=context,
                                            entries=entries,
                                            contexts=contexts,
                                            message=message,
                                            packages=packages,
                                            tags=tags,
                                            sdk=sdk,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                contexts = schemas.DictSchema
                                
                                
                                class fingerprints(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'fingerprints':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                context = schemas.DictSchema
                                groupID = schemas.StrSchema
                                title = schemas.StrSchema
                                __annotations__ = {
                                    "eventID": eventID,
                                    "dist": dist,
                                    "message": message,
                                    "id": id,
                                    "size": size,
                                    "errors": errors,
                                    "platform": platform,
                                    "type": type,
                                    "metadata": metadata,
                                    "tags": tags,
                                    "dateCreated": dateCreated,
                                    "dateReceived": dateReceived,
                                    "user": user,
                                    "entries": entries,
                                    "packages": packages,
                                    "sdk": sdk,
                                    "_meta": _meta,
                                    "contexts": contexts,
                                    "fingerprints": fingerprints,
                                    "context": context,
                                    "groupID": groupID,
                                    "title": title,
                                }
                        
                        eventID: MetaOapg.properties.eventID
                        metadata: MetaOapg.properties.metadata
                        groupID: MetaOapg.properties.groupID
                        _meta: MetaOapg.properties._meta
                        dist: MetaOapg.properties.dist
                        contexts: MetaOapg.properties.contexts
                        message: MetaOapg.properties.message
                        packages: MetaOapg.properties.packages
                        title: MetaOapg.properties.title
                        type: MetaOapg.properties.type
                        platform: MetaOapg.properties.platform
                        fingerprints: MetaOapg.properties.fingerprints
                        tags: MetaOapg.properties.tags
                        entries: MetaOapg.properties.entries
                        dateCreated: MetaOapg.properties.dateCreated
                        size: MetaOapg.properties.size
                        dateReceived: MetaOapg.properties.dateReceived
                        context: MetaOapg.properties.context
                        id: MetaOapg.properties.id
                        sdk: MetaOapg.properties.sdk
                        user: MetaOapg.properties.user
                        errors: MetaOapg.properties.errors
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["eventID"]) -> MetaOapg.properties.eventID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dist"]) -> MetaOapg.properties.dist: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateReceived"]) -> MetaOapg.properties.dateReceived: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["packages"]) -> MetaOapg.properties.packages: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sdk"]) -> MetaOapg.properties.sdk: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["_meta"]) -> MetaOapg.properties._meta: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["contexts"]) -> MetaOapg.properties.contexts: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["fingerprints"]) -> MetaOapg.properties.fingerprints: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["context"]) -> MetaOapg.properties.context: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["groupID"]) -> MetaOapg.properties.groupID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["eventID", "dist", "message", "id", "size", "errors", "platform", "type", "metadata", "tags", "dateCreated", "dateReceived", "user", "entries", "packages", "sdk", "_meta", "contexts", "fingerprints", "context", "groupID", "title", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["eventID"]) -> MetaOapg.properties.eventID: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dist"]) -> MetaOapg.properties.dist: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateReceived"]) -> MetaOapg.properties.dateReceived: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["packages"]) -> MetaOapg.properties.packages: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sdk"]) -> MetaOapg.properties.sdk: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["_meta"]) -> MetaOapg.properties._meta: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["contexts"]) -> MetaOapg.properties.contexts: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["fingerprints"]) -> MetaOapg.properties.fingerprints: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> MetaOapg.properties.context: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["groupID"]) -> MetaOapg.properties.groupID: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["eventID", "dist", "message", "id", "size", "errors", "platform", "type", "metadata", "tags", "dateCreated", "dateReceived", "user", "entries", "packages", "sdk", "_meta", "contexts", "fingerprints", "context", "groupID", "title", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            eventID: typing.Union[MetaOapg.properties.eventID, str, ],
                            metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            groupID: typing.Union[MetaOapg.properties.groupID, str, ],
                            _meta: typing.Union[MetaOapg.properties._meta, dict, frozendict.frozendict, ],
                            dist: typing.Union[MetaOapg.properties.dist, None, str, ],
                            contexts: typing.Union[MetaOapg.properties.contexts, dict, frozendict.frozendict, ],
                            message: typing.Union[MetaOapg.properties.message, str, ],
                            packages: typing.Union[MetaOapg.properties.packages, dict, frozendict.frozendict, ],
                            title: typing.Union[MetaOapg.properties.title, str, ],
                            type: typing.Union[MetaOapg.properties.type, str, ],
                            platform: typing.Union[MetaOapg.properties.platform, str, ],
                            fingerprints: typing.Union[MetaOapg.properties.fingerprints, list, tuple, ],
                            tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
                            entries: typing.Union[MetaOapg.properties.entries, list, tuple, ],
                            dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, ],
                            size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, ],
                            dateReceived: typing.Union[MetaOapg.properties.dateReceived, str, ],
                            context: typing.Union[MetaOapg.properties.context, dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            sdk: typing.Union[MetaOapg.properties.sdk, dict, frozendict.frozendict, ],
                            user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, None, ],
                            errors: typing.Union[MetaOapg.properties.errors, list, tuple, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'latestEvent':
                            return super().__new__(
                                cls,
                                *_args,
                                eventID=eventID,
                                metadata=metadata,
                                groupID=groupID,
                                _meta=_meta,
                                dist=dist,
                                contexts=contexts,
                                message=message,
                                packages=packages,
                                title=title,
                                type=type,
                                platform=platform,
                                fingerprints=fingerprints,
                                tags=tags,
                                entries=entries,
                                dateCreated=dateCreated,
                                size=size,
                                dateReceived=dateReceived,
                                context=context,
                                id=id,
                                sdk=sdk,
                                user=user,
                                errors=errors,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    id = schemas.StrSchema
                    __annotations__ = {
                        "latestEvent": latestEvent,
                        "id": id,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["latestEvent"]) -> MetaOapg.properties.latestEvent: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["latestEvent", "id", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["latestEvent"]) -> typing.Union[MetaOapg.properties.latestEvent, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["latestEvent", "id", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                latestEvent: typing.Union[MetaOapg.properties.latestEvent, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    latestEvent=latestEvent,
                    id=id,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _list_an_issues_hashes_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _list_an_issues_hashes_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _list_an_issues_hashes_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _list_an_issues_hashes_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_issue_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_cursor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class ListAnIssuesHashes(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def list_an_issues_hashes(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def list_an_issues_hashes(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def list_an_issues_hashes(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def list_an_issues_hashes(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_an_issues_hashes_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._list_an_issues_hashes_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


