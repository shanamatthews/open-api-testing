# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# Path params
IssueIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'issue_id': typing.Union[IssueIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_issue_id = api_client.PathParameter(
    name="issue_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IssueIdSchema,
    required=True,
)
_auth = [
    'auth_token',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "isBookmarked",
            "shortId",
            "metadata",
            "activity",
            "logger",
            "annotations",
            "project",
            "title",
            "type",
            "assignedTo",
            "seenBy",
            "userReportCount",
            "isSubscribed",
            "stats",
            "isPublic",
            "id",
            "lastRelease",
            "participants",
            "pluginContexts",
            "level",
            "firstSeen",
            "count",
            "pluginActions",
            "shareId",
            "tags",
            "culprit",
            "numComments",
            "subscriptionDetails",
            "lastSeen",
            "userCount",
            "statusDetails",
            "hasSeen",
            "permalink",
            "firstRelease",
            "pluginIssues",
            "status",
        }
        
        class properties:
            
            
            class activity(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                data = schemas.DictSchema
                                dateCreated = schemas.StrSchema
                                id = schemas.StrSchema
                                type = schemas.StrSchema
                                
                                
                                class user(
                                    schemas.DictBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneFrozenDictMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'user':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "data": data,
                                    "dateCreated": dateCreated,
                                    "id": id,
                                    "type": type,
                                    "user": user,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "dateCreated", "id", "type", "user", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "dateCreated", "id", "type", "user", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, schemas.Unset] = schemas.unset,
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                            user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                data=data,
                                dateCreated=dateCreated,
                                id=id,
                                type=type,
                                user=user,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'activity':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class annotations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'annotations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class assignedTo(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'assignedTo':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            count = schemas.StrSchema
            culprit = schemas.StrSchema
            
            
            class firstRelease(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class authors(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'authors':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        commitCount = schemas.IntSchema
                        
                        
                        class data(
                            schemas.DictBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneFrozenDictMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, None, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'data':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        dateCreated = schemas.StrSchema
                        
                        
                        class dateReleased(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'dateReleased':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        deployCount = schemas.IntSchema
                        firstEvent = schemas.StrSchema
                        
                        
                        class lastCommit(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'lastCommit':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class lastDeploy(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'lastDeploy':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        lastEvent = schemas.StrSchema
                        newGroups = schemas.IntSchema
                        
                        
                        class owner(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'owner':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class projects(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            name = schemas.StrSchema
                                            slug = schemas.StrSchema
                                            __annotations__ = {
                                                "name": name,
                                                "slug": slug,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "slug", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "slug", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            name=name,
                                            slug=slug,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'projects':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class ref(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'ref':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        shortVersion = schemas.StrSchema
                        
                        
                        class url(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'url':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        version = schemas.StrSchema
                        __annotations__ = {
                            "authors": authors,
                            "commitCount": commitCount,
                            "data": data,
                            "dateCreated": dateCreated,
                            "dateReleased": dateReleased,
                            "deployCount": deployCount,
                            "firstEvent": firstEvent,
                            "lastCommit": lastCommit,
                            "lastDeploy": lastDeploy,
                            "lastEvent": lastEvent,
                            "newGroups": newGroups,
                            "owner": owner,
                            "projects": projects,
                            "ref": ref,
                            "shortVersion": shortVersion,
                            "url": url,
                            "version": version,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["authors"]) -> MetaOapg.properties.authors: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["commitCount"]) -> MetaOapg.properties.commitCount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dateCreated"]) -> MetaOapg.properties.dateCreated: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dateReleased"]) -> MetaOapg.properties.dateReleased: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["deployCount"]) -> MetaOapg.properties.deployCount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["firstEvent"]) -> MetaOapg.properties.firstEvent: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastCommit"]) -> MetaOapg.properties.lastCommit: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastDeploy"]) -> MetaOapg.properties.lastDeploy: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lastEvent"]) -> MetaOapg.properties.lastEvent: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["newGroups"]) -> MetaOapg.properties.newGroups: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["shortVersion"]) -> MetaOapg.properties.shortVersion: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["authors", "commitCount", "data", "dateCreated", "dateReleased", "deployCount", "firstEvent", "lastCommit", "lastDeploy", "lastEvent", "newGroups", "owner", "projects", "ref", "shortVersion", "url", "version", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["authors"]) -> typing.Union[MetaOapg.properties.authors, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["commitCount"]) -> typing.Union[MetaOapg.properties.commitCount, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dateCreated"]) -> typing.Union[MetaOapg.properties.dateCreated, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dateReleased"]) -> typing.Union[MetaOapg.properties.dateReleased, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["deployCount"]) -> typing.Union[MetaOapg.properties.deployCount, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["firstEvent"]) -> typing.Union[MetaOapg.properties.firstEvent, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastCommit"]) -> typing.Union[MetaOapg.properties.lastCommit, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastDeploy"]) -> typing.Union[MetaOapg.properties.lastDeploy, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lastEvent"]) -> typing.Union[MetaOapg.properties.lastEvent, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["newGroups"]) -> typing.Union[MetaOapg.properties.newGroups, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> typing.Union[MetaOapg.properties.projects, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ref"]) -> typing.Union[MetaOapg.properties.ref, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["shortVersion"]) -> typing.Union[MetaOapg.properties.shortVersion, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authors", "commitCount", "data", "dateCreated", "dateReleased", "deployCount", "firstEvent", "lastCommit", "lastDeploy", "lastEvent", "newGroups", "owner", "projects", "ref", "shortVersion", "url", "version", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    authors: typing.Union[MetaOapg.properties.authors, list, tuple, schemas.Unset] = schemas.unset,
                    commitCount: typing.Union[MetaOapg.properties.commitCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
                    dateCreated: typing.Union[MetaOapg.properties.dateCreated, str, schemas.Unset] = schemas.unset,
                    dateReleased: typing.Union[MetaOapg.properties.dateReleased, None, str, schemas.Unset] = schemas.unset,
                    deployCount: typing.Union[MetaOapg.properties.deployCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    firstEvent: typing.Union[MetaOapg.properties.firstEvent, str, schemas.Unset] = schemas.unset,
                    lastCommit: typing.Union[MetaOapg.properties.lastCommit, None, str, schemas.Unset] = schemas.unset,
                    lastDeploy: typing.Union[MetaOapg.properties.lastDeploy, None, str, schemas.Unset] = schemas.unset,
                    lastEvent: typing.Union[MetaOapg.properties.lastEvent, str, schemas.Unset] = schemas.unset,
                    newGroups: typing.Union[MetaOapg.properties.newGroups, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    owner: typing.Union[MetaOapg.properties.owner, None, str, schemas.Unset] = schemas.unset,
                    projects: typing.Union[MetaOapg.properties.projects, list, tuple, schemas.Unset] = schemas.unset,
                    ref: typing.Union[MetaOapg.properties.ref, None, str, schemas.Unset] = schemas.unset,
                    shortVersion: typing.Union[MetaOapg.properties.shortVersion, str, schemas.Unset] = schemas.unset,
                    url: typing.Union[MetaOapg.properties.url, None, str, schemas.Unset] = schemas.unset,
                    version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'firstRelease':
                    return super().__new__(
                        cls,
                        *_args,
                        authors=authors,
                        commitCount=commitCount,
                        data=data,
                        dateCreated=dateCreated,
                        dateReleased=dateReleased,
                        deployCount=deployCount,
                        firstEvent=firstEvent,
                        lastCommit=lastCommit,
                        lastDeploy=lastDeploy,
                        lastEvent=lastEvent,
                        newGroups=newGroups,
                        owner=owner,
                        projects=projects,
                        ref=ref,
                        shortVersion=shortVersion,
                        url=url,
                        version=version,
                        _configuration=_configuration,
                        **kwargs,
                    )
            firstSeen = schemas.StrSchema
            hasSeen = schemas.BoolSchema
            id = schemas.StrSchema
            isBookmarked = schemas.BoolSchema
            isPublic = schemas.BoolSchema
            isSubscribed = schemas.BoolSchema
            
            
            class lastRelease(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'lastRelease':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            lastSeen = schemas.StrSchema
            level = schemas.StrSchema
            
            
            class logger(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logger':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class metadata(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "filename",
                                "type",
                                "value",
                            }
                            
                            class properties:
                                filename = schemas.StrSchema
                                type = schemas.StrSchema
                                value = schemas.StrSchema
                                __annotations__ = {
                                    "filename": filename,
                                    "type": type,
                                    "value": value,
                                }
                        
                        filename: MetaOapg.properties.filename
                        type: MetaOapg.properties.type
                        value: MetaOapg.properties.value
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["filename", "type", "value", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filename", "type", "value", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            filename: typing.Union[MetaOapg.properties.filename, str, ],
                            type: typing.Union[MetaOapg.properties.type, str, ],
                            value: typing.Union[MetaOapg.properties.value, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *_args,
                                filename=filename,
                                type=type,
                                value=value,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class one_of_1(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "title",
                            }
                            
                            class properties:
                                title = schemas.StrSchema
                                __annotations__ = {
                                    "title": title,
                                }
                        
                        title: MetaOapg.properties.title
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            title: typing.Union[MetaOapg.properties.title, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_1':
                            return super().__new__(
                                cls,
                                *_args,
                                title=title,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            numComments = schemas.IntSchema
            
            
            class participants(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'participants':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            permalink = schemas.StrSchema
            
            
            class pluginActions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pluginActions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class pluginContexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pluginContexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class pluginIssues(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pluginIssues':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class project(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        slug = schemas.StrSchema
                        id = schemas.StrSchema
                        name = schemas.StrSchema
                        __annotations__ = {
                            "slug": slug,
                            "id": id,
                            "name": name,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["slug", "id", "name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["slug", "id", "name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'project':
                    return super().__new__(
                        cls,
                        *_args,
                        slug=slug,
                        id=id,
                        name=name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class seenBy(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'seenBy':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class shareId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shareId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            shortId = schemas.StrSchema
            
            
            class stats(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class _24h(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.NumberSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> '_24h':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class _30d(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.NumberSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> '_30d':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "24h": _24h,
                            "30d": _30d,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["24h"]) -> MetaOapg.properties._24h: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["30d"]) -> MetaOapg.properties._30d: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["24h", "30d", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["24h"]) -> typing.Union[MetaOapg.properties._24h, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["30d"]) -> typing.Union[MetaOapg.properties._30d, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["24h", "30d", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'stats':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "resolved": "RESOLVED",
                        "unresolved": "UNRESOLVED",
                        "ignored": "IGNORED",
                    }
                
                @schemas.classproperty
                def RESOLVED(cls):
                    return cls("resolved")
                
                @schemas.classproperty
                def UNRESOLVED(cls):
                    return cls("unresolved")
                
                @schemas.classproperty
                def IGNORED(cls):
                    return cls("ignored")
            statusDetails = schemas.DictSchema
            
            
            class subscriptionDetails(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'subscriptionDetails':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            title = schemas.StrSchema
            type = schemas.StrSchema
            userCount = schemas.IntSchema
            userReportCount = schemas.IntSchema
            __annotations__ = {
                "activity": activity,
                "annotations": annotations,
                "assignedTo": assignedTo,
                "count": count,
                "culprit": culprit,
                "firstRelease": firstRelease,
                "firstSeen": firstSeen,
                "hasSeen": hasSeen,
                "id": id,
                "isBookmarked": isBookmarked,
                "isPublic": isPublic,
                "isSubscribed": isSubscribed,
                "lastRelease": lastRelease,
                "lastSeen": lastSeen,
                "level": level,
                "logger": logger,
                "metadata": metadata,
                "numComments": numComments,
                "participants": participants,
                "permalink": permalink,
                "pluginActions": pluginActions,
                "pluginContexts": pluginContexts,
                "pluginIssues": pluginIssues,
                "project": project,
                "seenBy": seenBy,
                "shareId": shareId,
                "shortId": shortId,
                "stats": stats,
                "status": status,
                "statusDetails": statusDetails,
                "subscriptionDetails": subscriptionDetails,
                "tags": tags,
                "title": title,
                "type": type,
                "userCount": userCount,
                "userReportCount": userReportCount,
            }
    
    isBookmarked: MetaOapg.properties.isBookmarked
    shortId: MetaOapg.properties.shortId
    metadata: MetaOapg.properties.metadata
    activity: MetaOapg.properties.activity
    logger: MetaOapg.properties.logger
    annotations: MetaOapg.properties.annotations
    project: MetaOapg.properties.project
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    assignedTo: MetaOapg.properties.assignedTo
    seenBy: MetaOapg.properties.seenBy
    userReportCount: MetaOapg.properties.userReportCount
    isSubscribed: MetaOapg.properties.isSubscribed
    stats: MetaOapg.properties.stats
    isPublic: MetaOapg.properties.isPublic
    id: MetaOapg.properties.id
    lastRelease: MetaOapg.properties.lastRelease
    participants: MetaOapg.properties.participants
    pluginContexts: MetaOapg.properties.pluginContexts
    level: MetaOapg.properties.level
    firstSeen: MetaOapg.properties.firstSeen
    count: MetaOapg.properties.count
    pluginActions: MetaOapg.properties.pluginActions
    shareId: MetaOapg.properties.shareId
    tags: MetaOapg.properties.tags
    culprit: MetaOapg.properties.culprit
    numComments: MetaOapg.properties.numComments
    subscriptionDetails: MetaOapg.properties.subscriptionDetails
    lastSeen: MetaOapg.properties.lastSeen
    userCount: MetaOapg.properties.userCount
    statusDetails: MetaOapg.properties.statusDetails
    hasSeen: MetaOapg.properties.hasSeen
    permalink: MetaOapg.properties.permalink
    firstRelease: MetaOapg.properties.firstRelease
    pluginIssues: MetaOapg.properties.pluginIssues
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activity"]) -> MetaOapg.properties.activity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedTo"]) -> MetaOapg.properties.assignedTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["culprit"]) -> MetaOapg.properties.culprit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstRelease"]) -> MetaOapg.properties.firstRelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstSeen"]) -> MetaOapg.properties.firstSeen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasSeen"]) -> MetaOapg.properties.hasSeen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSubscribed"]) -> MetaOapg.properties.isSubscribed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRelease"]) -> MetaOapg.properties.lastRelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastSeen"]) -> MetaOapg.properties.lastSeen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logger"]) -> MetaOapg.properties.logger: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numComments"]) -> MetaOapg.properties.numComments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participants"]) -> MetaOapg.properties.participants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pluginActions"]) -> MetaOapg.properties.pluginActions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pluginContexts"]) -> MetaOapg.properties.pluginContexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pluginIssues"]) -> MetaOapg.properties.pluginIssues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seenBy"]) -> MetaOapg.properties.seenBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shareId"]) -> MetaOapg.properties.shareId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortId"]) -> MetaOapg.properties.shortId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusDetails"]) -> MetaOapg.properties.statusDetails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriptionDetails"]) -> MetaOapg.properties.subscriptionDetails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userCount"]) -> MetaOapg.properties.userCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userReportCount"]) -> MetaOapg.properties.userReportCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["activity", "annotations", "assignedTo", "count", "culprit", "firstRelease", "firstSeen", "hasSeen", "id", "isBookmarked", "isPublic", "isSubscribed", "lastRelease", "lastSeen", "level", "logger", "metadata", "numComments", "participants", "permalink", "pluginActions", "pluginContexts", "pluginIssues", "project", "seenBy", "shareId", "shortId", "stats", "status", "statusDetails", "subscriptionDetails", "tags", "title", "type", "userCount", "userReportCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activity"]) -> MetaOapg.properties.activity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedTo"]) -> MetaOapg.properties.assignedTo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["culprit"]) -> MetaOapg.properties.culprit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstRelease"]) -> MetaOapg.properties.firstRelease: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstSeen"]) -> MetaOapg.properties.firstSeen: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasSeen"]) -> MetaOapg.properties.hasSeen: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBookmarked"]) -> MetaOapg.properties.isBookmarked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPublic"]) -> MetaOapg.properties.isPublic: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSubscribed"]) -> MetaOapg.properties.isSubscribed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRelease"]) -> MetaOapg.properties.lastRelease: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastSeen"]) -> MetaOapg.properties.lastSeen: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> MetaOapg.properties.level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logger"]) -> MetaOapg.properties.logger: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numComments"]) -> MetaOapg.properties.numComments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participants"]) -> MetaOapg.properties.participants: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pluginActions"]) -> MetaOapg.properties.pluginActions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pluginContexts"]) -> MetaOapg.properties.pluginContexts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pluginIssues"]) -> MetaOapg.properties.pluginIssues: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seenBy"]) -> MetaOapg.properties.seenBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shareId"]) -> MetaOapg.properties.shareId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortId"]) -> MetaOapg.properties.shortId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusDetails"]) -> MetaOapg.properties.statusDetails: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriptionDetails"]) -> MetaOapg.properties.subscriptionDetails: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userCount"]) -> MetaOapg.properties.userCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userReportCount"]) -> MetaOapg.properties.userReportCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["activity", "annotations", "assignedTo", "count", "culprit", "firstRelease", "firstSeen", "hasSeen", "id", "isBookmarked", "isPublic", "isSubscribed", "lastRelease", "lastSeen", "level", "logger", "metadata", "numComments", "participants", "permalink", "pluginActions", "pluginContexts", "pluginIssues", "project", "seenBy", "shareId", "shortId", "stats", "status", "statusDetails", "subscriptionDetails", "tags", "title", "type", "userCount", "userReportCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isBookmarked: typing.Union[MetaOapg.properties.isBookmarked, bool, ],
        shortId: typing.Union[MetaOapg.properties.shortId, str, ],
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        activity: typing.Union[MetaOapg.properties.activity, list, tuple, ],
        logger: typing.Union[MetaOapg.properties.logger, None, str, ],
        annotations: typing.Union[MetaOapg.properties.annotations, list, tuple, ],
        project: typing.Union[MetaOapg.properties.project, dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        assignedTo: typing.Union[MetaOapg.properties.assignedTo, dict, frozendict.frozendict, None, ],
        seenBy: typing.Union[MetaOapg.properties.seenBy, list, tuple, ],
        userReportCount: typing.Union[MetaOapg.properties.userReportCount, decimal.Decimal, int, ],
        isSubscribed: typing.Union[MetaOapg.properties.isSubscribed, bool, ],
        stats: typing.Union[MetaOapg.properties.stats, dict, frozendict.frozendict, ],
        isPublic: typing.Union[MetaOapg.properties.isPublic, bool, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        lastRelease: typing.Union[MetaOapg.properties.lastRelease, dict, frozendict.frozendict, None, ],
        participants: typing.Union[MetaOapg.properties.participants, list, tuple, ],
        pluginContexts: typing.Union[MetaOapg.properties.pluginContexts, list, tuple, ],
        level: typing.Union[MetaOapg.properties.level, str, ],
        firstSeen: typing.Union[MetaOapg.properties.firstSeen, str, ],
        count: typing.Union[MetaOapg.properties.count, str, ],
        pluginActions: typing.Union[MetaOapg.properties.pluginActions, list, tuple, ],
        shareId: typing.Union[MetaOapg.properties.shareId, None, str, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        culprit: typing.Union[MetaOapg.properties.culprit, str, ],
        numComments: typing.Union[MetaOapg.properties.numComments, decimal.Decimal, int, ],
        subscriptionDetails: typing.Union[MetaOapg.properties.subscriptionDetails, dict, frozendict.frozendict, None, ],
        lastSeen: typing.Union[MetaOapg.properties.lastSeen, str, ],
        userCount: typing.Union[MetaOapg.properties.userCount, decimal.Decimal, int, ],
        statusDetails: typing.Union[MetaOapg.properties.statusDetails, dict, frozendict.frozendict, ],
        hasSeen: typing.Union[MetaOapg.properties.hasSeen, bool, ],
        permalink: typing.Union[MetaOapg.properties.permalink, str, ],
        firstRelease: typing.Union[MetaOapg.properties.firstRelease, dict, frozendict.frozendict, None, ],
        pluginIssues: typing.Union[MetaOapg.properties.pluginIssues, list, tuple, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            isBookmarked=isBookmarked,
            shortId=shortId,
            metadata=metadata,
            activity=activity,
            logger=logger,
            annotations=annotations,
            project=project,
            title=title,
            type=type,
            assignedTo=assignedTo,
            seenBy=seenBy,
            userReportCount=userReportCount,
            isSubscribed=isSubscribed,
            stats=stats,
            isPublic=isPublic,
            id=id,
            lastRelease=lastRelease,
            participants=participants,
            pluginContexts=pluginContexts,
            level=level,
            firstSeen=firstSeen,
            count=count,
            pluginActions=pluginActions,
            shareId=shareId,
            tags=tags,
            culprit=culprit,
            numComments=numComments,
            subscriptionDetails=subscriptionDetails,
            lastSeen=lastSeen,
            userCount=userCount,
            statusDetails=statusDetails,
            hasSeen=hasSeen,
            permalink=permalink,
            firstRelease=firstRelease,
            pluginIssues=pluginIssues,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)
_status_code_to_response = {
    '200': _response_for_200,
    '403': _response_for_403,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _retrieve_an_issue_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _retrieve_an_issue_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _retrieve_an_issue_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _retrieve_an_issue_oapg(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_issue_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class RetrieveAnIssue(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def retrieve_an_issue(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def retrieve_an_issue(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def retrieve_an_issue(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def retrieve_an_issue(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._retrieve_an_issue_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._retrieve_an_issue_oapg(
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


